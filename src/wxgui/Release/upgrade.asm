; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Software\ultradefrag-7.0.0-beta2.src\src\wxgui\upgrade.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?max_digits10@?$numeric_limits@D@std@@2HB	; std::numeric_limits<char>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?max_digits10@?$numeric_limits@_W@std@@2HB	; std::numeric_limits<wchar_t>::max_digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?max_digits10@?$numeric_limits@_N@std@@2HB	; std::numeric_limits<bool>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?max_digits10@?$numeric_limits@C@std@@2HB	; std::numeric_limits<signed char>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?max_digits10@?$numeric_limits@E@std@@2HB	; std::numeric_limits<unsigned char>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?max_digits10@?$numeric_limits@F@std@@2HB	; std::numeric_limits<short>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?max_digits10@?$numeric_limits@G@std@@2HB	; std::numeric_limits<unsigned short>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?max_digits10@?$numeric_limits@H@std@@2HB	; std::numeric_limits<int>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?max_digits10@?$numeric_limits@I@std@@2HB	; std::numeric_limits<unsigned int>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?max_digits10@?$numeric_limits@J@std@@2HB	; std::numeric_limits<long>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?max_digits10@?$numeric_limits@K@std@@2HB	; std::numeric_limits<unsigned long>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?max_digits10@?$numeric_limits@_J@std@@2HB	; std::numeric_limits<__int64>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?max_digits10@?$numeric_limits@_K@std@@2HB	; std::numeric_limits<unsigned __int64>::max_digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$0A@@tr1@std@@2IB	; std::tr1::integral_constant<unsigned int,0>::value
PUBLIC	?_Rank@?$_Arithmetic_traits@_N@std@@2HB		; std::_Arithmetic_traits<bool>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@D@std@@2HB		; std::_Arithmetic_traits<char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@C@std@@2HB		; std::_Arithmetic_traits<signed char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@E@std@@2HB		; std::_Arithmetic_traits<unsigned char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@F@std@@2HB		; std::_Arithmetic_traits<short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@G@std@@2HB		; std::_Arithmetic_traits<unsigned short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@H@std@@2HB		; std::_Arithmetic_traits<int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@I@std@@2HB		; std::_Arithmetic_traits<unsigned int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@J@std@@2HB		; std::_Arithmetic_traits<long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@K@std@@2HB		; std::_Arithmetic_traits<unsigned long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_J@std@@2HB		; std::_Arithmetic_traits<__int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_K@std@@2HB		; std::_Arithmetic_traits<unsigned __int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@M@std@@2HB		; std::_Arithmetic_traits<float>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@N@std@@2HB		; std::_Arithmetic_traits<double>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@O@std@@2HB		; std::_Arithmetic_traits<long double>::_Rank
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
CONST	SEGMENT
$SG153330 DB	'.', 00H, '\', 00H, 't', 00H, 'm', 00H, 'p', 00H, 00H, 00H
$SG153335 DB	'\', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, 00H, 00H
$SG153338 DB	00H, 00H
	ORG $+6
$SG153341 DB	'h', 00H, 't', 00H, 't', 00H, 'p', 00H, ':', 00H, '/', 00H
	DB	'/', 00H, 'u', 00H, 'l', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, 'f', 00H, 'r', 00H, 'a', 00H, 'g', 00H, '.', 00H
	DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, 'f'
	DB	00H, 'o', 00H, 'r', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'n', 00H
	DB	'e', 00H, 't', 00H, '/', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 's'
	DB	00H, 'i', 00H, 'o', 00H, 'n', 00H, '.', 00H, 'i', 00H, 'n', 00H
	DB	'i', 00H, 00H, 00H
	ORG $+2
$SG153342 DB	'\', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 's', 00H, 'i', 00H
	DB	'o', 00H, 'n', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'i', 00H, 00H
	DB	00H
	ORG $+6
$SG153344 DB	'h', 00H, 't', 00H, 't', 00H, 'p', 00H, ':', 00H, '/', 00H
	DB	'/', 00H, 'u', 00H, 'l', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, 'f', 00H, 'r', 00H, 'a', 00H, 'g', 00H, '.', 00H
	DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, 'f'
	DB	00H, 'o', 00H, 'r', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'n', 00H
	DB	'e', 00H, 't', 00H, '/', 00H, 's', 00H, 't', 00H, 'a', 00H, 'b'
	DB	00H, 'l', 00H, 'e', 00H, '-', 00H, 'v', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, 'i', 00H, 'o', 00H, 'n', 00H, '.', 00H, 'i', 00H, 'n'
	DB	00H, 'i', 00H, 00H, 00H
$SG153345 DB	'\', 00H, 's', 00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H
	DB	'e', 00H, '-', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 's', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'i', 00H
	DB	00H, 00H
$SG153353 DB	'UltraDefrag 7.0.1 test1', 00H
$SG153355 DB	'UpgradeThread::Entry', 00H
	ORG $+3
$SG153356 DB	'INFO:  %s: latest version : %ls', 00H
$SG153357 DB	'UpgradeThread::Entry', 00H
	ORG $+3
$SG153358 DB	'INFO:  %s: current version: %hs', 00H
$SG153372 DB	'%u.%u.%u alpha%u', 00H
	ORG $+3
$SG153375 DB	'%u.%u.%u beta%u', 00H
$SG153378 DB	'%u.%u.%u rc%u', 00H
	ORG $+2
$SG153381 DB	'%u.%u.%u', 00H
	ORG $+3
$SG153384 DB	'UpgradeThread::ParseVersionString', 00H
	ORG $+2
$SG153385 DB	'ERROR: %s: parsing of ''%hs'' failed', 00H
	ORG $+5
$SG153404 DB	'R', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 's', 00H
	DB	'e', 00H, ' ', 00H, '%', 00H, 'l', 00H, 's', 00H, ' ', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'a', 00H, 'v', 00H, 'a', 00H, 'i', 00H
	DB	'l', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, ' ', 00H, 'f'
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, 'd', 00H, 'o', 00H, 'w', 00H
	DB	'n', 00H, 'l', 00H, 'o', 00H, 'a', 00H, 'd', 00H, '!', 00H, 00H
	DB	00H
	ORG $+2
$SG153411 DB	'&', 00H, 'C', 00H, 'a', 00H, 'n', 00H, 'c', 00H, 'e', 00H
	DB	'l', 00H, 00H, 00H
$SG153412 DB	'&', 00H, 'U', 00H, 'p', 00H, 'g', 00H, 'r', 00H, 'a', 00H
	DB	'd', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG153413 DB	'w', 00H, 'x', 00H, 'A', 00H, 'R', 00H, 'T', 00H, '_', 00H
	DB	'I', 00H, 'N', 00H, 'F', 00H, 'O', 00H, 'R', 00H, 'M', 00H, 'A'
	DB	00H, 'T', 00H, 'I', 00H, 'O', 00H, 'N', 00H, 00H, 00H
$SG153414 DB	'Y', 00H, 'o', 00H, 'u', 00H, ' ', 00H, 'c', 00H, 'a', 00H
	DB	'n', 00H, ' ', 00H, 'u', 00H, 'p', 00H, 'g', 00H, 'r', 00H, 'a'
	DB	00H, 'd', 00H, 'e', 00H, ' ', 00H, 'm', 00H, 'e', 00H, ' ', 00H
	DB	'^', 00H, '-', 00H, '^', 00H, 00H, 00H
	ORG $+2
$SG153416 DB	'h', 00H, 't', 00H, 't', 00H, 'p', 00H, ':', 00H, '/', 00H
	DB	'/', 00H, 'u', 00H, 'l', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, 'f', 00H, 'r', 00H, 'a', 00H, 'g', 00H, '.', 00H
	DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, 'f'
	DB	00H, 'o', 00H, 'r', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'n', 00H
	DB	'e', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG153418 DB	'C', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H, ' ', 00H, '%'
	DB	00H, 'l', 00H, 's', 00H, '!', 00H, 00H, 00H
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@O@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@O@std@@2HB DD 09H		; std::_Arithmetic_traits<long double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@N@std@@2HB DD 08H		; std::_Arithmetic_traits<double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@M@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@M@std@@2HB DD 07H		; std::_Arithmetic_traits<float>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_K@std@@2HB DD 06H		; std::_Arithmetic_traits<unsigned __int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_J@std@@2HB DD 06H		; std::_Arithmetic_traits<__int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@K@std@@2HB DD 05H		; std::_Arithmetic_traits<unsigned long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@J@std@@2HB DD 05H		; std::_Arithmetic_traits<long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@I@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@I@std@@2HB DD 04H		; std::_Arithmetic_traits<unsigned int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@H@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@H@std@@2HB DD 04H		; std::_Arithmetic_traits<int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@G@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@G@std@@2HB DD 03H		; std::_Arithmetic_traits<unsigned short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@F@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@F@std@@2HB DD 03H		; std::_Arithmetic_traits<short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@E@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@E@std@@2HB DD 02H		; std::_Arithmetic_traits<unsigned char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@C@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@C@std@@2HB DD 02H		; std::_Arithmetic_traits<signed char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@D@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@D@std@@2HB DD 02H		; std::_Arithmetic_traits<char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_N@std@@2HB DD 01H		; std::_Arithmetic_traits<bool>::_Rank
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@tr1@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@tr1@std@@2IB DD 00H	; std::tr1::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 08H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@_K@std@@2HB DD 015H	; std::numeric_limits<unsigned __int64>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@_J@std@@2HB DD 014H	; std::numeric_limits<__int64>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@K@std@@2HB DD 0bH	; std::numeric_limits<unsigned long>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@J@std@@2HB DD 0bH	; std::numeric_limits<long>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@I@std@@2HB DD 0bH	; std::numeric_limits<unsigned int>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@H@std@@2HB DD 0bH	; std::numeric_limits<int>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@G@std@@2HB DD 06H	; std::numeric_limits<unsigned short>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@F@std@@2HB DD 06H	; std::numeric_limits<short>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@E@std@@2HB DD 04H	; std::numeric_limits<unsigned char>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@C@std@@2HB DD 04H	; std::numeric_limits<signed char>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@_N@std@@2HB DD 00H	; std::numeric_limits<bool>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@_W@std@@2HB DD 06H	; std::numeric_limits<wchar_t>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@D@std@@2HB DD 04H	; std::numeric_limits<char>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 01H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
PUBLIC	??1wxString@@QAE@XZ				; wxString::~wxString
PUBLIC	??_EwxString@@QAEPAXI@Z				; wxString::`vector deleting destructor'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp
;	COMDAT ??_EwxString@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EwxString@@QAEPAXI@Z PROC				; wxString::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1wxString@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1wxString@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EwxString@@QAEPAXI@Z ENDP				; wxString::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??1wxStringBase@@QAE@XZ				; wxStringBase::~wxStringBase
; Function compile flags: /Odtp
;	COMDAT ??1wxString@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1wxString@@QAE@XZ PROC				; wxString::~wxString, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1wxStringBase@@QAE@XZ			; wxStringBase::~wxStringBase
	mov	esp, ebp
	pop	ebp
	ret	0
??1wxString@@QAE@XZ ENDP				; wxString::~wxString
_TEXT	ENDS
PUBLIC	?Unlock@wxStringData@@QAEXXZ			; wxStringData::Unlock
PUBLIC	?GetStringData@wxStringBase@@IBEPAUwxStringData@@XZ ; wxStringBase::GetStringData
; Function compile flags: /Odtp
;	COMDAT ??1wxStringBase@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1wxStringBase@@QAE@XZ PROC				; wxStringBase::~wxStringBase, COMDAT
; _this$ = ecx
; File c:\software\wxwidgets-2.8.12\include\wx\string.h
; Line 389
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 396
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStringData@wxStringBase@@IBEPAUwxStringData@@XZ ; wxStringBase::GetStringData
	mov	ecx, eax
	call	?Unlock@wxStringData@@QAEXXZ		; wxStringData::Unlock
; Line 397
	mov	esp, ebp
	pop	ebp
	ret	0
??1wxStringBase@@QAE@XZ ENDP				; wxStringBase::~wxStringBase
_TEXT	ENDS
PUBLIC	?IsEmpty@wxStringData@@QBE_NXZ			; wxStringData::IsEmpty
EXTRN	?Free@wxStringData@@QAEXXZ:PROC			; wxStringData::Free
; Function compile flags: /Odtp
;	COMDAT ?Unlock@wxStringData@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Unlock@wxStringData@@QAEXXZ PROC			; wxStringData::Unlock, COMDAT
; _this$ = ecx
; Line 239
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@wxStringData@@QBE_NXZ		; wxStringData::IsEmpty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@Unlock
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN2@Unlock
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@wxStringData@@QAEXXZ		; wxStringData::Free
$LN2@Unlock:
	mov	esp, ebp
	pop	ebp
	ret	0
?Unlock@wxStringData@@QAEXXZ ENDP			; wxStringData::Unlock
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?IsEmpty@wxStringData@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@wxStringData@@QBE_NXZ PROC			; wxStringData::IsEmpty, COMDAT
; _this$ = ecx
; Line 226
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], -1
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@wxStringData@@QBE_NXZ ENDP			; wxStringData::IsEmpty
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetStringData@wxStringBase@@IBEPAUwxStringData@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetStringData@wxStringBase@@IBEPAUwxStringData@@XZ PROC ; wxStringBase::GetStringData, COMDAT
; _this$ = ecx
; Line 265
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	0
?GetStringData@wxStringBase@@IBEPAUwxStringData@@XZ ENDP ; wxStringBase::GetStringData
_TEXT	ENDS
PUBLIC	??1wxFileName@@QAE@XZ				; wxFileName::~wxFileName
PUBLIC	??1wxTextFile@@UAE@XZ				; wxTextFile::~wxTextFile
PUBLIC	??1wxCommandEvent@@UAE@XZ			; wxCommandEvent::~wxCommandEvent
PUBLIC	?wxPostEvent@@YAXPAVwxEvtHandler@@AAVwxEvent@@@Z ; wxPostEvent
PUBLIC	?SetString@wxCommandEvent@@QAEXABVwxString@@@Z	; wxCommandEvent::SetString
PUBLIC	?wc_str@wxString@@QBEPB_WXZ			; wxString::wc_str
PUBLIC	??1wxWritableCharBuffer@@QAE@XZ			; wxWritableCharBuffer::~wxWritableCharBuffer
PUBLIC	?ParseVersionString@UpgradeThread@@AAEHPBD@Z	; UpgradeThread::ParseVersionString
PUBLIC	??BwxCharBuffer@@QBEPBDXZ			; wxCharBuffer::operator char const *
PUBLIC	?char_str@wxString@@QBE?AVwxWritableCharBuffer@@ABVwxMBConv@@@Z ; wxString::char_str
PUBLIC	?GetFirstLine@wxTextBuffer@@QAEAAVwxString@@XZ	; wxTextBuffer::GetFirstLine
PUBLIC	??1wxConvAuto@@UAE@XZ				; wxConvAuto::~wxConvAuto
PUBLIC	??0wxConvAuto@@QAE@XZ				; wxConvAuto::wxConvAuto
PUBLIC	??0wxTextFile@@QAE@XZ				; wxTextFile::wxTextFile
PUBLIC	??0wxString@@QAE@ABV0@@Z			; wxString::wxString
PUBLIC	??6wxString@@QAEAAV0@PB_W@Z			; wxString::operator<<
PUBLIC	??BwxString@@QBEPB_WXZ				; wxString::operator wchar_t const *
PUBLIC	??0wxFileName@@QAE@ABVwxString@@W4wxPathFormat@@@Z ; wxFileName::wxFileName
PUBLIC	??0wxString@@QAE@PB_W@Z				; wxString::wxString
PUBLIC	?Entry@UpgradeThread@@UAEPAXXZ			; UpgradeThread::Entry
EXTRN	?wxRemoveFile@@YA_NABVwxString@@@Z:PROC		; wxRemoveFile
EXTRN	?Close@wxTextBuffer@@QAE_NXZ:PROC		; wxTextBuffer::Close
EXTRN	??0wxCommandEvent@@QAE@HH@Z:PROC		; wxCommandEvent::wxCommandEvent
EXTRN	?wxEVT_COMMAND_MENU_SELECTED@@3HB:DWORD		; wxEVT_COMMAND_MENU_SELECTED
EXTRN	_winx_dbg_print:PROC
EXTRN	?wxConvLibc@@3AAVwxMBConv@@A:DWORD		; wxConvLibc
EXTRN	?Trim@wxString@@QAEAAV1@_N@Z:PROC		; wxString::Trim
EXTRN	?Open@wxTextBuffer@@QAE_NABVwxString@@ABVwxMBConv@@@Z:PROC ; wxTextBuffer::Open
EXTRN	?DownloadFile@Utils@@SA_NABVwxString@@0@Z:PROC	; Utils::DownloadFile
EXTRN	?wxMkdir@@YA_NABVwxString@@H@Z:PROC		; wxMkdir
EXTRN	?wxDirExists@@YA_NPB_W@Z:PROC			; wxDirExists
EXTRN	?GetFullPath@wxFileName@@QBE?AVwxString@@W4wxPathFormat@@@Z:PROC ; wxFileName::GetFullPath
EXTRN	?Normalize@wxFileName@@QAE_NHABVwxString@@W4wxPathFormat@@@Z:PROC ; wxFileName::Normalize
EXTRN	?wxEmptyString@@3PB_WB:DWORD			; wxEmptyString
EXTRN	?CheckForTermination@MainFrame@@QAE_NH@Z:PROC	; MainFrame::CheckForTermination
EXTRN	?g_mainFrame@@3PAVMainFrame@@A:DWORD		; g_mainFrame
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
xdata$x	SEGMENT
__ehfuncinfo$?Entry@UpgradeThread@@UAEPAXXZ DD 019930522H
	DD	0cH
	DD	FLAT:__unwindtable$?Entry@UpgradeThread@@UAEPAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Entry@UpgradeThread@@UAEPAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Entry@UpgradeThread@@UAEPAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Entry@UpgradeThread@@UAEPAXXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Entry@UpgradeThread@@UAEPAXXZ$1
	DD	02H
	DD	FLAT:__unwindfunclet$?Entry@UpgradeThread@@UAEPAXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?Entry@UpgradeThread@@UAEPAXXZ$3
	DD	04H
	DD	FLAT:__unwindfunclet$?Entry@UpgradeThread@@UAEPAXXZ$4
	DD	05H
	DD	FLAT:__unwindfunclet$?Entry@UpgradeThread@@UAEPAXXZ$5
	DD	06H
	DD	FLAT:__unwindfunclet$?Entry@UpgradeThread@@UAEPAXXZ$6
	DD	07H
	DD	FLAT:__unwindfunclet$?Entry@UpgradeThread@@UAEPAXXZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$?Entry@UpgradeThread@@UAEPAXXZ$8
	DD	09H
	DD	FLAT:__unwindfunclet$?Entry@UpgradeThread@@UAEPAXXZ$9
	DD	09H
	DD	FLAT:__unwindfunclet$?Entry@UpgradeThread@@UAEPAXXZ$10
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
tv269 = -228						; size = 4
tv188 = -224						; size = 4
tv266 = -220						; size = 4
tv170 = -216						; size = 4
_this$ = -212						; size = 4
$T162714 = -208						; size = 4
$T162713 = -204						; size = 16
$T162712 = -188						; size = 4
$T162711 = -184						; size = 4
_event$153360 = -180					; size = 56
_cv$153352 = -124					; size = 4
_file$153347 = -120					; size = 52
_lv$153349 = -68					; size = 4
_last$153350 = -64					; size = 4
_current$153354 = -60					; size = 4
_url$153337 = -56					; size = 4
_path$153339 = -52					; size = 4
_dir$153333 = -48					; size = 4
_target$153328 = -44					; size = 32
__$EHRec$ = -12						; size = 12
?Entry@UpgradeThread@@UAEPAXXZ PROC			; UpgradeThread::Entry
; _this$ = ecx
; File c:\software\ultradefrag-7.0.0-beta2.src\src\wxgui\upgrade.cpp
; Line 53
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Entry@UpgradeThread@@UAEPAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
$LN9@Entry:
; Line 54
	push	200					; 000000c8H
	mov	ecx, DWORD PTR ?g_mainFrame@@3PAVMainFrame@@A ; g_mainFrame
	call	?CheckForTermination@MainFrame@@QAE_NH@Z ; MainFrame::CheckForTermination
	movzx	eax, al
	test	eax, eax
	jne	$LN8@Entry
; Line 55
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+36]
	test	edx, edx
	je	$LN7@Entry
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	$LN7@Entry
; Line 56
	push	OFFSET $SG153330
	lea	ecx, DWORD PTR $T162711[ebp]
	call	??0wxString@@QAE@PB_W@Z			; wxString::wxString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	lea	ecx, DWORD PTR $T162711[ebp]
	push	ecx
	lea	ecx, DWORD PTR _target$153328[ebp]
	call	??0wxFileName@@QAE@ABVwxString@@W4wxPathFormat@@@Z ; wxFileName::wxFileName
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T162711[ebp]
	call	??1wxString@@QAE@XZ
; Line 57
	mov	edx, DWORD PTR ?wxEmptyString@@3PB_WB	; wxEmptyString
	push	edx
	lea	ecx, DWORD PTR $T162712[ebp]
	call	??0wxString@@QAE@PB_W@Z			; wxString::wxString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	push	0
	lea	eax, DWORD PTR $T162712[ebp]
	push	eax
	push	247					; 000000f7H
	lea	ecx, DWORD PTR _target$153328[ebp]
	call	?Normalize@wxFileName@@QAE_NHABVwxString@@W4wxPathFormat@@@Z ; wxFileName::Normalize
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T162712[ebp]
	call	??1wxString@@QAE@XZ
; Line 58
	push	0
	lea	ecx, DWORD PTR _dir$153333[ebp]
	push	ecx
	lea	ecx, DWORD PTR _target$153328[ebp]
	call	?GetFullPath@wxFileName@@QBE?AVwxString@@W4wxPathFormat@@@Z ; wxFileName::GetFullPath
	mov	BYTE PTR __$EHRec$[ebp+8], 4
; Line 59
	lea	ecx, DWORD PTR _dir$153333[ebp]
	call	??BwxString@@QBEPB_WXZ			; wxString::operator wchar_t const *
	push	eax
	call	?wxDirExists@@YA_NPB_W@Z		; wxDirExists
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN6@Entry
	push	511					; 000001ffH
	lea	eax, DWORD PTR _dir$153333[ebp]
	push	eax
	call	?wxMkdir@@YA_NABVwxString@@H@Z		; wxMkdir
	add	esp, 8
$LN6@Entry:
; Line 65
	push	OFFSET $SG153335
	lea	ecx, DWORD PTR _dir$153333[ebp]
	call	??6wxString@@QAEAAV0@PB_W@Z		; wxString::operator<<
; Line 66
	lea	ecx, DWORD PTR _dir$153333[ebp]
	call	??BwxString@@QBEPB_WXZ			; wxString::operator wchar_t const *
	push	eax
	call	?wxDirExists@@YA_NPB_W@Z		; wxDirExists
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN5@Entry
	push	511					; 000001ffH
	lea	edx, DWORD PTR _dir$153333[ebp]
	push	edx
	call	?wxMkdir@@YA_NABVwxString@@H@Z		; wxMkdir
	add	esp, 8
$LN5@Entry:
; Line 68
	push	OFFSET $SG153338
	lea	ecx, DWORD PTR _url$153337[ebp]
	call	??0wxString@@QAE@PB_W@Z			; wxString::wxString
	mov	BYTE PTR __$EHRec$[ebp+8], 5
; Line 69
	lea	eax, DWORD PTR _dir$153333[ebp]
	push	eax
	lea	ecx, DWORD PTR _path$153339[ebp]
	call	??0wxString@@QAE@ABV0@@Z		; wxString::wxString
	mov	BYTE PTR __$EHRec$[ebp+8], 6
; Line 71
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+40], 2
	jne	SHORT $LN4@Entry
; Line 72
	push	OFFSET $SG153341
	lea	ecx, DWORD PTR _url$153337[ebp]
	call	??6wxString@@QAEAAV0@PB_W@Z		; wxString::operator<<
; Line 73
	push	OFFSET $SG153342
	lea	ecx, DWORD PTR _path$153339[ebp]
	call	??6wxString@@QAEAAV0@PB_W@Z		; wxString::operator<<
; Line 74
	jmp	SHORT $LN3@Entry
$LN4@Entry:
; Line 75
	push	OFFSET $SG153344
	lea	ecx, DWORD PTR _url$153337[ebp]
	call	??6wxString@@QAEAAV0@PB_W@Z		; wxString::operator<<
; Line 76
	push	OFFSET $SG153345
	lea	ecx, DWORD PTR _path$153339[ebp]
	call	??6wxString@@QAEAAV0@PB_W@Z		; wxString::operator<<
$LN3@Entry:
; Line 79
	lea	edx, DWORD PTR _path$153339[ebp]
	push	edx
	lea	eax, DWORD PTR _url$153337[ebp]
	push	eax
	call	?DownloadFile@Utils@@SA_NABVwxString@@0@Z ; Utils::DownloadFile
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	$LN2@Entry
; Line 80
	lea	ecx, DWORD PTR _file$153347[ebp]
	call	??0wxTextFile@@QAE@XZ			; wxTextFile::wxTextFile
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR $T162713[ebp]
	call	??0wxConvAuto@@QAE@XZ			; wxConvAuto::wxConvAuto
	mov	DWORD PTR tv170[ebp], eax
	mov	edx, DWORD PTR tv170[ebp]
	mov	DWORD PTR tv266[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	eax, DWORD PTR tv266[ebp]
	push	eax
	lea	ecx, DWORD PTR _path$153339[ebp]
	push	ecx
	lea	ecx, DWORD PTR _file$153347[ebp]
	call	?Open@wxTextBuffer@@QAE_NABVwxString@@ABVwxMBConv@@@Z ; wxTextBuffer::Open
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR $T162713[ebp]
	call	??1wxConvAuto@@UAE@XZ			; wxConvAuto::~wxConvAuto
; Line 81
	lea	ecx, DWORD PTR _file$153347[ebp]
	call	?GetFirstLine@wxTextBuffer@@QAEAAVwxString@@XZ ; wxTextBuffer::GetFirstLine
	push	eax
	lea	ecx, DWORD PTR _lv$153349[ebp]
	call	??0wxString@@QAE@ABV0@@Z		; wxString::wxString
	mov	BYTE PTR __$EHRec$[ebp+8], 9
; Line 82
	push	1
	lea	ecx, DWORD PTR _lv$153349[ebp]
	call	?Trim@wxString@@QAEAAV1@_N@Z		; wxString::Trim
	push	0
	lea	ecx, DWORD PTR _lv$153349[ebp]
	call	?Trim@wxString@@QAEAAV1@_N@Z		; wxString::Trim
; Line 83
	mov	edx, DWORD PTR ?wxConvLibc@@3AAVwxMBConv@@A ; wxConvLibc
	push	edx
	lea	eax, DWORD PTR $T162714[ebp]
	push	eax
	lea	ecx, DWORD PTR _lv$153349[ebp]
	call	?char_str@wxString@@QBE?AVwxWritableCharBuffer@@ABVwxMBConv@@@Z ; wxString::char_str
	mov	DWORD PTR tv188[ebp], eax
	mov	ecx, DWORD PTR tv188[ebp]
	mov	DWORD PTR tv269[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	ecx, DWORD PTR tv269[ebp]
	call	??BwxCharBuffer@@QBEPBDXZ		; wxCharBuffer::operator char const *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ParseVersionString@UpgradeThread@@AAEHPBD@Z ; UpgradeThread::ParseVersionString
	mov	DWORD PTR _last$153350[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T162714[ebp]
	call	??1wxWritableCharBuffer@@QAE@XZ
; Line 85
	mov	DWORD PTR _cv$153352[ebp], OFFSET $SG153353
; Line 86
	mov	edx, DWORD PTR _cv$153352[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ParseVersionString@UpgradeThread@@AAEHPBD@Z ; UpgradeThread::ParseVersionString
	mov	DWORD PTR _current$153354[ebp], eax
; Line 88
	lea	ecx, DWORD PTR _lv$153349[ebp]
	call	?wc_str@wxString@@QBEPB_WXZ		; wxString::wc_str
	push	eax
	push	OFFSET $SG153355
	push	OFFSET $SG153356
	push	0
	call	_winx_dbg_print
	add	esp, 16					; 00000010H
; Line 89
	mov	eax, DWORD PTR _cv$153352[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	push	OFFSET $SG153357
	push	OFFSET $SG153358
	push	0
	call	_winx_dbg_print
	add	esp, 16					; 00000010H
; Line 91
	cmp	DWORD PTR _last$153350[ebp], 0
	je	SHORT $LN1@Entry
	cmp	DWORD PTR _current$153354[ebp], 0
	je	SHORT $LN1@Entry
	mov	ecx, DWORD PTR _last$153350[ebp]
	cmp	ecx, DWORD PTR _current$153354[ebp]
	jle	SHORT $LN1@Entry
; Line 92
	push	65					; 00000041H
	mov	edx, DWORD PTR ?wxEVT_COMMAND_MENU_SELECTED@@3HB ; wxEVT_COMMAND_MENU_SELECTED
	push	edx
	lea	ecx, DWORD PTR _event$153360[ebp]
	call	??0wxCommandEvent@@QAE@HH@Z		; wxCommandEvent::wxCommandEvent
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
; Line 93
	lea	eax, DWORD PTR _lv$153349[ebp]
	push	eax
	lea	ecx, DWORD PTR _event$153360[ebp]
	call	?SetString@wxCommandEvent@@QAEXABVwxString@@@Z ; wxCommandEvent::SetString
; Line 94
	lea	ecx, DWORD PTR _event$153360[ebp]
	push	ecx
	mov	edx, DWORD PTR ?g_mainFrame@@3PAVMainFrame@@A ; g_mainFrame
	push	edx
	call	?wxPostEvent@@YAXPAVwxEvtHandler@@AAVwxEvent@@@Z ; wxPostEvent
	add	esp, 8
; Line 95
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _event$153360[ebp]
	call	??1wxCommandEvent@@UAE@XZ
$LN1@Entry:
; Line 97
	lea	ecx, DWORD PTR _file$153347[ebp]
	call	?Close@wxTextBuffer@@QAE_NXZ		; wxTextBuffer::Close
	lea	eax, DWORD PTR _path$153339[ebp]
	push	eax
	call	?wxRemoveFile@@YA_NABVwxString@@@Z	; wxRemoveFile
	add	esp, 4
; Line 98
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _lv$153349[ebp]
	call	??1wxString@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _file$153347[ebp]
	call	??1wxTextFile@@UAE@XZ
$LN2@Entry:
; Line 99
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+36], 0
; Line 100
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _path$153339[ebp]
	call	??1wxString@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _url$153337[ebp]
	call	??1wxString@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _dir$153333[ebp]
	call	??1wxString@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _target$153328[ebp]
	call	??1wxFileName@@QAE@XZ
$LN7@Entry:
; Line 101
	jmp	$LN9@Entry
$LN8@Entry:
; Line 103
	xor	eax, eax
; Line 104
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Entry@UpgradeThread@@UAEPAXXZ$0:
	lea	ecx, DWORD PTR $T162711[ebp]
	jmp	??1wxString@@QAE@XZ
__unwindfunclet$?Entry@UpgradeThread@@UAEPAXXZ$1:
	lea	ecx, DWORD PTR _target$153328[ebp]
	jmp	??1wxFileName@@QAE@XZ
__unwindfunclet$?Entry@UpgradeThread@@UAEPAXXZ$2:
	lea	ecx, DWORD PTR $T162712[ebp]
	jmp	??1wxString@@QAE@XZ
__unwindfunclet$?Entry@UpgradeThread@@UAEPAXXZ$3:
	lea	ecx, DWORD PTR _dir$153333[ebp]
	jmp	??1wxString@@QAE@XZ
__unwindfunclet$?Entry@UpgradeThread@@UAEPAXXZ$4:
	lea	ecx, DWORD PTR _url$153337[ebp]
	jmp	??1wxString@@QAE@XZ
__unwindfunclet$?Entry@UpgradeThread@@UAEPAXXZ$5:
	lea	ecx, DWORD PTR _path$153339[ebp]
	jmp	??1wxString@@QAE@XZ
__unwindfunclet$?Entry@UpgradeThread@@UAEPAXXZ$6:
	lea	ecx, DWORD PTR _file$153347[ebp]
	jmp	??1wxTextFile@@UAE@XZ
__unwindfunclet$?Entry@UpgradeThread@@UAEPAXXZ$7:
	lea	ecx, DWORD PTR $T162713[ebp]
	jmp	??1wxConvAuto@@UAE@XZ			; wxConvAuto::~wxConvAuto
__unwindfunclet$?Entry@UpgradeThread@@UAEPAXXZ$8:
	lea	ecx, DWORD PTR _lv$153349[ebp]
	jmp	??1wxString@@QAE@XZ
__unwindfunclet$?Entry@UpgradeThread@@UAEPAXXZ$9:
	lea	ecx, DWORD PTR $T162714[ebp]
	jmp	??1wxWritableCharBuffer@@QAE@XZ
__unwindfunclet$?Entry@UpgradeThread@@UAEPAXXZ$10:
	lea	ecx, DWORD PTR _event$153360[ebp]
	jmp	??1wxCommandEvent@@UAE@XZ
__ehhandler$?Entry@UpgradeThread@@UAEPAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Entry@UpgradeThread@@UAEPAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Entry@UpgradeThread@@UAEPAXXZ ENDP			; UpgradeThread::Entry
; Function compile flags: /Odtp
;	COMDAT ??BwxCharBuffer@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BwxCharBuffer@@QBEPBDXZ PROC				; wxCharBuffer::operator char const *, COMDAT
; _this$ = ecx
; File c:\software\wxwidgets-2.8.12\include\wx\buffer.h
; Line 127
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BwxCharBuffer@@QBEPBDXZ ENDP				; wxCharBuffer::operator char const *
_TEXT	ENDS
PUBLIC	??0wxStringBase@@QAE@ABV0@@Z			; wxStringBase::wxStringBase
; Function compile flags: /Odtp
;	COMDAT ??0wxString@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stringSrc$ = 8						; size = 4
??0wxString@@QAE@ABV0@@Z PROC				; wxString::wxString, COMDAT
; _this$ = ecx
; File c:\software\wxwidgets-2.8.12\include\wx\string.h
; Line 690
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _stringSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0wxStringBase@@QAE@ABV0@@Z		; wxStringBase::wxStringBase
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0wxString@@QAE@ABV0@@Z ENDP				; wxString::wxString
_TEXT	ENDS
PUBLIC	?Lock@wxStringData@@QAEXXZ			; wxStringData::Lock
PUBLIC	?Init@wxStringBase@@IAEXXZ			; wxStringBase::Init
PUBLIC	?empty@wxStringBase@@QBE_NXZ			; wxStringBase::empty
; Function compile flags: /Odtp
;	COMDAT ??0wxStringBase@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stringSrc$ = 8						; size = 4
??0wxStringBase@@QAE@ABV0@@Z PROC			; wxStringBase::wxStringBase, COMDAT
; _this$ = ecx
; Line 349
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 354
	mov	ecx, DWORD PTR _stringSrc$[ebp]
	call	?empty@wxStringBase@@QBE_NXZ		; wxStringBase::empty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@wxStringBa
; Line 356
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@wxStringBase@@IAEXXZ		; wxStringBase::Init
; Line 358
	jmp	SHORT $LN3@wxStringBa
$LN2@wxStringBa:
; Line 359
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _stringSrc$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
; Line 360
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStringData@wxStringBase@@IBEPAUwxStringData@@XZ ; wxStringBase::GetStringData
	mov	ecx, eax
	call	?Lock@wxStringData@@QAEXXZ		; wxStringData::Lock
$LN3@wxStringBa:
; Line 362
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0wxStringBase@@QAE@ABV0@@Z ENDP			; wxStringBase::wxStringBase
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?Lock@wxStringData@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Lock@wxStringData@@QAEXXZ PROC				; wxStringData::Lock, COMDAT
; _this$ = ecx
; Line 230
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@wxStringData@@QBE_NXZ		; wxStringData::IsEmpty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@Lock
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx
$LN2@Lock:
	mov	esp, ebp
	pop	ebp
	ret	0
?Lock@wxStringData@@QAEXXZ ENDP				; wxStringData::Lock
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?Init@wxStringBase@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@wxStringBase@@IAEXXZ PROC				; wxStringBase::Init, COMDAT
; _this$ = ecx
; Line 270
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?wxEmptyString@@3PB_WB	; wxEmptyString
	mov	DWORD PTR [eax], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@wxStringBase@@IAEXXZ ENDP				; wxStringBase::Init
_TEXT	ENDS
PUBLIC	?length@wxStringBase@@QBEIXZ			; wxStringBase::length
; Function compile flags: /Odtp
;	COMDAT ?empty@wxStringBase@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?empty@wxStringBase@@QBE_NXZ PROC			; wxStringBase::empty, COMDAT
; _this$ = ecx
; Line 422
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@wxStringBase@@QBEIXZ		; wxStringBase::length
	neg	eax
	sbb	eax, eax
	add	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?empty@wxStringBase@@QBE_NXZ ENDP			; wxStringBase::empty
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?length@wxStringBase@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?length@wxStringBase@@QBEIXZ PROC			; wxStringBase::length, COMDAT
; _this$ = ecx
; Line 412
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStringData@wxStringBase@@IBEPAUwxStringData@@XZ ; wxStringBase::GetStringData
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?length@wxStringBase@@QBEIXZ ENDP			; wxStringBase::length
_TEXT	ENDS
PUBLIC	??0wxStringBase@@QAE@PB_W@Z			; wxStringBase::wxStringBase
PUBLIC	??_C@_11LOCGONAA@?$AA?$AA@			; `string'
;	COMDAT ??_C@_11LOCGONAA@?$AA?$AA@
CONST	SEGMENT
??_C@_11LOCGONAA@?$AA?$AA@ DB 00H, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0wxString@@QAE@PB_W@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
_psz$ = 8						; size = 4
??0wxString@@QAE@PB_W@Z PROC				; wxString::wxString, COMDAT
; _this$ = ecx
; Line 698
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR _psz$[ebp], 0
	je	SHORT $LN3@wxString
	mov	eax, DWORD PTR _psz$[ebp]
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@wxString
$LN3@wxString:
	mov	DWORD PTR tv71[ebp], OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
$LN4@wxString:
	mov	ecx, DWORD PTR tv71[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0wxStringBase@@QAE@PB_W@Z		; wxStringBase::wxStringBase
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0wxString@@QAE@PB_W@Z ENDP				; wxString::wxString
_TEXT	ENDS
EXTRN	?InitWith@wxStringBase@@IAEXPB_WII@Z:PROC	; wxStringBase::InitWith
EXTRN	?npos@wxStringBase@@2IB:DWORD			; wxStringBase::npos
; Function compile flags: /Odtp
;	COMDAT ??0wxStringBase@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_psz$ = 8						; size = 4
??0wxStringBase@@QAE@PB_W@Z PROC			; wxStringBase::wxStringBase, COMDAT
; _this$ = ecx
; Line 367
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ?npos@wxStringBase@@2IB	; wxStringBase::npos
	push	eax
	push	0
	mov	ecx, DWORD PTR _psz$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitWith@wxStringBase@@IAEXPB_WII@Z	; wxStringBase::InitWith
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0wxStringBase@@QAE@PB_W@Z ENDP			; wxStringBase::wxStringBase
_TEXT	ENDS
PUBLIC	?c_str@wxStringBase@@QBEPB_WXZ			; wxStringBase::c_str
; Function compile flags: /Odtp
;	COMDAT ??BwxString@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BwxString@@QBEPB_WXZ PROC				; wxString::operator wchar_t const *, COMDAT
; _this$ = ecx
; Line 832
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?c_str@wxStringBase@@QBEPB_WXZ		; wxStringBase::c_str
	mov	esp, ebp
	pop	ebp
	ret	0
??BwxString@@QBEPB_WXZ ENDP				; wxString::operator wchar_t const *
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?c_str@wxStringBase@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?c_str@wxStringBase@@QBEPB_WXZ PROC			; wxStringBase::c_str, COMDAT
; _this$ = ecx
; Line 527
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@wxStringBase@@QBEPB_WXZ ENDP			; wxStringBase::c_str
_TEXT	ENDS
PUBLIC	??1wxCharBuffer@@QAE@XZ				; wxCharBuffer::~wxCharBuffer
PUBLIC	??0wxWritableCharBuffer@@QAE@ABVwxCharBuffer@@@Z ; wxWritableCharBuffer::wxWritableCharBuffer
EXTRN	?mb_str@wxString@@QBE?BVwxCharBuffer@@ABVwxMBConv@@@Z:PROC ; wxString::mb_str
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?char_str@wxString@@QBE?AVwxWritableCharBuffer@@ABVwxMBConv@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?char_str@wxString@@QBE?AVwxWritableCharBuffer@@ABVwxMBConv@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?char_str@wxString@@QBE?AVwxWritableCharBuffer@@ABVwxMBConv@@@Z$0
__ehfuncinfo$?char_str@wxString@@QBE?AVwxWritableCharBuffer@@ABVwxMBConv@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?char_str@wxString@@QBE?AVwxWritableCharBuffer@@ABVwxMBConv@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?char_str@wxString@@QBE?AVwxWritableCharBuffer@@ABVwxMBConv@@@Z
_TEXT	SEGMENT
tv75 = -32						; size = 4
tv80 = -28						; size = 4
_this$ = -24						; size = 4
$T162754 = -20						; size = 4
$T162751 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_conv$ = 12						; size = 4
?char_str@wxString@@QBE?AVwxWritableCharBuffer@@ABVwxMBConv@@@Z PROC ; wxString::char_str, COMDAT
; _this$ = ecx
; Line 844
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?char_str@wxString@@QBE?AVwxWritableCharBuffer@@ABVwxMBConv@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T162754[ebp], 0
	mov	eax, DWORD PTR _conv$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T162751[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?mb_str@wxString@@QBE?BVwxCharBuffer@@ABVwxMBConv@@@Z ; wxString::mb_str
	mov	DWORD PTR tv80[ebp], eax
	mov	edx, DWORD PTR tv80[ebp]
	mov	DWORD PTR tv75[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR tv75[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0wxWritableCharBuffer@@QAE@ABVwxCharBuffer@@@Z ; wxWritableCharBuffer::wxWritableCharBuffer
	mov	ecx, DWORD PTR $T162754[ebp]
	or	ecx, 1
	mov	DWORD PTR $T162754[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T162751[ebp]
	call	??1wxCharBuffer@@QAE@XZ			; wxCharBuffer::~wxCharBuffer
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?char_str@wxString@@QBE?AVwxWritableCharBuffer@@ABVwxMBConv@@@Z$0:
	lea	ecx, DWORD PTR $T162751[ebp]
	jmp	??1wxCharBuffer@@QAE@XZ			; wxCharBuffer::~wxCharBuffer
__unwindfunclet$?char_str@wxString@@QBE?AVwxWritableCharBuffer@@ABVwxMBConv@@@Z$1:
	mov	eax, DWORD PTR $T162754[ebp]
	and	eax, 1
	je	$LN5@char_str
	and	DWORD PTR $T162754[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1wxWritableCharBuffer@@QAE@XZ
$LN5@char_str:
	ret	0
__ehhandler$?char_str@wxString@@QBE?AVwxWritableCharBuffer@@ABVwxMBConv@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?char_str@wxString@@QBE?AVwxWritableCharBuffer@@ABVwxMBConv@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?char_str@wxString@@QBE?AVwxWritableCharBuffer@@ABVwxMBConv@@@Z ENDP ; wxString::char_str
EXTRN	_free:PROC
; Function compile flags: /Odtp
;	COMDAT ??1wxCharBuffer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1wxCharBuffer@@QAE@XZ PROC				; wxCharBuffer::~wxCharBuffer, COMDAT
; _this$ = ecx
; File c:\software\wxwidgets-2.8.12\include\wx\buffer.h
; Line 127
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_free
	add	esp, 4
	mov	esp, ebp
	pop	ebp
	ret	0
??1wxCharBuffer@@QAE@XZ ENDP				; wxCharBuffer::~wxCharBuffer
_TEXT	ENDS
PUBLIC	??0wxCharBuffer@@QAE@ABV0@@Z			; wxCharBuffer::wxCharBuffer
; Function compile flags: /Odtp
;	COMDAT ??0wxWritableCharBuffer@@QAE@ABVwxCharBuffer@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_src$ = 8						; size = 4
??0wxWritableCharBuffer@@QAE@ABVwxCharBuffer@@@Z PROC	; wxWritableCharBuffer::wxWritableCharBuffer, COMDAT
; _this$ = ecx
; Line 129
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0wxCharBuffer@@QAE@ABV0@@Z		; wxCharBuffer::wxCharBuffer
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0wxWritableCharBuffer@@QAE@ABVwxCharBuffer@@@Z ENDP	; wxWritableCharBuffer::wxWritableCharBuffer
_TEXT	ENDS
PUBLIC	?release@wxCharBuffer@@QBEPADXZ			; wxCharBuffer::release
; Function compile flags: /Odtp
;	COMDAT ??0wxCharBuffer@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_src$ = 8						; size = 4
??0wxCharBuffer@@QAE@ABV0@@Z PROC			; wxCharBuffer::wxCharBuffer, COMDAT
; _this$ = ecx
; Line 127
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _src$[ebp]
	call	?release@wxCharBuffer@@QBEPADXZ		; wxCharBuffer::release
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0wxCharBuffer@@QAE@ABV0@@Z ENDP			; wxCharBuffer::wxCharBuffer
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?release@wxCharBuffer@@QBEPADXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_p$ = -4						; size = 4
?release@wxCharBuffer@@QBEPADXZ PROC			; wxCharBuffer::release, COMDAT
; _this$ = ecx
; Line 127
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
	mov	eax, DWORD PTR _p$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?release@wxCharBuffer@@QBEPADXZ ENDP			; wxCharBuffer::release
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?wc_str@wxString@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?wc_str@wxString@@QBEPB_WXZ PROC			; wxString::wc_str, COMDAT
; _this$ = ecx
; File c:\software\wxwidgets-2.8.12\include\wx\string.h
; Line 923
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?c_str@wxStringBase@@QBEPB_WXZ		; wxStringBase::c_str
	mov	esp, ebp
	pop	ebp
	ret	0
?wc_str@wxString@@QBEPB_WXZ ENDP			; wxString::wc_str
_TEXT	ENDS
PUBLIC	?append@wxString@@QAEAAV1@PB_W@Z		; wxString::append
; Function compile flags: /Odtp
;	COMDAT ??6wxString@@QAEAAV0@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_psz$ = 8						; size = 4
??6wxString@@QAEAAV0@PB_W@Z PROC			; wxString::operator<<, COMDAT
; _this$ = ecx
; Line 1004
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _psz$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@wxString@@QAEAAV1@PB_W@Z	; wxString::append
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??6wxString@@QAEAAV0@PB_W@Z ENDP			; wxString::operator<<
_TEXT	ENDS
PUBLIC	?append@wxStringBase@@QAEAAV1@PB_W@Z		; wxStringBase::append
; Function compile flags: /Odtp
;	COMDAT ?append@wxString@@QAEAAV1@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_sz$ = 8						; size = 4
?append@wxString@@QAEAAV1@PB_W@Z PROC			; wxString::append, COMDAT
; _this$ = ecx
; Line 1299
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _sz$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@wxStringBase@@QAEAAV1@PB_W@Z	; wxStringBase::append
	mov	esp, ebp
	pop	ebp
	ret	4
?append@wxString@@QAEAAV1@PB_W@Z ENDP			; wxString::append
_TEXT	ENDS
PUBLIC	?ConcatSelf@wxStringBase@@IAE_NIPB_W@Z		; wxStringBase::ConcatSelf
PUBLIC	?wxStrlen@@YAIPB_W@Z				; wxStrlen
; Function compile flags: /Odtp
;	COMDAT ?append@wxStringBase@@QAEAAV1@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_sz$ = 8						; size = 4
?append@wxStringBase@@QAEAAV1@PB_W@Z PROC		; wxStringBase::append, COMDAT
; _this$ = ecx
; Line 448
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _sz$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sz$[ebp]
	push	ecx
	call	?wxStrlen@@YAIPB_W@Z			; wxStrlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ConcatSelf@wxStringBase@@IAE_NIPB_W@Z	; wxStringBase::ConcatSelf
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?append@wxStringBase@@QAEAAV1@PB_W@Z ENDP		; wxStringBase::append
_TEXT	ENDS
EXTRN	_wcslen:PROC
; Function compile flags: /Odtp
;	COMDAT ?wxStrlen@@YAIPB_W@Z
_TEXT	SEGMENT
tv67 = -4						; size = 4
_psz$ = 8						; size = 4
?wxStrlen@@YAIPB_W@Z PROC				; wxStrlen, COMDAT
; File c:\software\wxwidgets-2.8.12\include\wx\wxchar.h
; Line 865
	push	ebp
	mov	ebp, esp
	push	ecx
	cmp	DWORD PTR _psz$[ebp], 0
	je	SHORT $LN3@wxStrlen
	mov	eax, DWORD PTR _psz$[ebp]
	push	eax
	call	_wcslen
	add	esp, 4
	mov	DWORD PTR tv67[ebp], eax
	jmp	SHORT $LN4@wxStrlen
$LN3@wxStrlen:
	mov	DWORD PTR tv67[ebp], 0
$LN4@wxStrlen:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?wxStrlen@@YAIPB_W@Z ENDP				; wxStrlen
_TEXT	ENDS
EXTRN	?ConcatSelf@wxStringBase@@IAE_NIPB_WI@Z:PROC	; wxStringBase::ConcatSelf
; Function compile flags: /Odtp
;	COMDAT ?ConcatSelf@wxStringBase@@IAE_NIPB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nLen$ = 8						; size = 4
_src$ = 12						; size = 4
?ConcatSelf@wxStringBase@@IAE_NIPB_W@Z PROC		; wxStringBase::ConcatSelf, COMDAT
; _this$ = ecx
; File c:\software\wxwidgets-2.8.12\include\wx\string.h
; Line 287
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _nLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nLen$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ConcatSelf@wxStringBase@@IAE_NIPB_WI@Z	; wxStringBase::ConcatSelf
	mov	esp, ebp
	pop	ebp
	ret	8
?ConcatSelf@wxStringBase@@IAE_NIPB_W@Z ENDP		; wxStringBase::ConcatSelf
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1wxWritableCharBuffer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1wxWritableCharBuffer@@QAE@XZ PROC			; wxWritableCharBuffer::~wxWritableCharBuffer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1wxCharBuffer@@QAE@XZ			; wxCharBuffer::~wxCharBuffer
	mov	esp, ebp
	pop	ebp
	ret	0
??1wxWritableCharBuffer@@QAE@XZ ENDP			; wxWritableCharBuffer::~wxWritableCharBuffer
_TEXT	ENDS
PUBLIC	??4wxString@@QAEAAV0@ABV0@@Z			; wxString::operator=
; Function compile flags: /Odtp
;	COMDAT ?SetString@wxCommandEvent@@QAEXABVwxString@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?SetString@wxCommandEvent@@QAEXABVwxString@@@Z PROC	; wxCommandEvent::SetString, COMDAT
; _this$ = ecx
; File c:\software\wxwidgets-2.8.12\include\wx\event.h
; Line 541
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??4wxString@@QAEAAV0@ABV0@@Z
	mov	esp, ebp
	pop	ebp
	ret	4
?SetString@wxCommandEvent@@QAEXABVwxString@@@Z ENDP	; wxCommandEvent::SetString
_TEXT	ENDS
EXTRN	??4wxStringBase@@QAEAAV0@ABV0@@Z:PROC		; wxStringBase::operator=
; Function compile flags: /Odtp
;	COMDAT ??4wxString@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4wxString@@QAEAAV0@ABV0@@Z PROC			; wxString::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4wxStringBase@@QAEAAV0@ABV0@@Z	; wxStringBase::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4wxString@@QAEAAV0@ABV0@@Z ENDP			; wxString::operator=
_TEXT	ENDS
PUBLIC	??1wxEvent@@UAE@XZ				; wxEvent::~wxEvent
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1wxCommandEvent@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1wxCommandEvent@@UAE@XZ$0
__ehfuncinfo$??1wxCommandEvent@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1wxCommandEvent@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1wxCommandEvent@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1wxCommandEvent@@UAE@XZ PROC				; wxCommandEvent::~wxCommandEvent, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1wxCommandEvent@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1wxString@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1wxEvent@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1wxCommandEvent@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1wxEvent@@UAE@XZ
__ehhandler$??1wxCommandEvent@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1wxCommandEvent@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1wxCommandEvent@@UAE@XZ ENDP				; wxCommandEvent::~wxCommandEvent
PUBLIC	??1wxObject@@UAE@XZ				; wxObject::~wxObject
; Function compile flags: /Odtp
;	COMDAT ??1wxEvent@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1wxEvent@@UAE@XZ PROC					; wxEvent::~wxEvent, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1wxObject@@UAE@XZ			; wxObject::~wxObject
	mov	esp, ebp
	pop	ebp
	ret	0
??1wxEvent@@UAE@XZ ENDP					; wxEvent::~wxEvent
_TEXT	ENDS
PUBLIC	??_7wxObject@@6B@				; wxObject::`vftable'
PUBLIC	??_R4wxObject@@6B@				; wxObject::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVwxObject@@@8				; wxObject `RTTI Type Descriptor'
PUBLIC	??_R3wxObject@@8				; wxObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2wxObject@@8				; wxObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@wxObject@@8			; wxObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	?UnRef@wxObject@@QAEXXZ:PROC			; wxObject::UnRef
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?GetClassInfo@wxObject@@UBEPAVwxClassInfo@@XZ:PROC ; wxObject::GetClassInfo
EXTRN	??_EwxObject@@UAEPAXI@Z:PROC			; wxObject::`vector deleting destructor'
EXTRN	?CreateRefData@wxObject@@MBEPAVwxObjectRefData@@XZ:PROC ; wxObject::CreateRefData
EXTRN	?CloneRefData@wxObject@@MBEPAVwxObjectRefData@@PBV2@@Z:PROC ; wxObject::CloneRefData
;	COMDAT ??_R1A@?0A@EA@wxObject@@8
; File c:\software\wxwidgets-2.8.12\include\wx\object.h
rdata$r	SEGMENT
??_R1A@?0A@EA@wxObject@@8 DD FLAT:??_R0?AVwxObject@@@8	; wxObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3wxObject@@8
rdata$r	ENDS
;	COMDAT ??_R2wxObject@@8
rdata$r	SEGMENT
??_R2wxObject@@8 DD FLAT:??_R1A@?0A@EA@wxObject@@8	; wxObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3wxObject@@8
rdata$r	SEGMENT
??_R3wxObject@@8 DD 00H					; wxObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2wxObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVwxObject@@@8
_DATA	SEGMENT
??_R0?AVwxObject@@@8 DD FLAT:??_7type_info@@6B@		; wxObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVwxObject@@', 00H
_DATA	ENDS
;	COMDAT ??_R4wxObject@@6B@
rdata$r	SEGMENT
??_R4wxObject@@6B@ DD 00H				; wxObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVwxObject@@@8
	DD	FLAT:??_R3wxObject@@8
rdata$r	ENDS
;	COMDAT ??_7wxObject@@6B@
CONST	SEGMENT
??_7wxObject@@6B@ DD FLAT:??_R4wxObject@@6B@		; wxObject::`vftable'
	DD	FLAT:?GetClassInfo@wxObject@@UBEPAVwxClassInfo@@XZ
	DD	FLAT:??_EwxObject@@UAEPAXI@Z
	DD	FLAT:?CreateRefData@wxObject@@MBEPAVwxObjectRefData@@XZ
	DD	FLAT:?CloneRefData@wxObject@@MBEPAVwxObjectRefData@@PBV2@@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??1wxObject@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1wxObject@@UAE@XZ PROC				; wxObject::~wxObject, COMDAT
; _this$ = ecx
; Line 413
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7wxObject@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UnRef@wxObject@@QAEXXZ			; wxObject::UnRef
	mov	esp, ebp
	pop	ebp
	ret	0
??1wxObject@@UAE@XZ ENDP				; wxObject::~wxObject
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_GwxObject@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GwxObject@@UAEPAXI@Z PROC				; wxObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1wxObject@@UAE@XZ			; wxObject::~wxObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GwxObject@@UAEPAXI@Z ENDP				; wxObject::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	?AddPendingEvent@wxEvtHandler@@QAEXAAVwxEvent@@@Z:PROC ; wxEvtHandler::AddPendingEvent
; Function compile flags: /Odtp
;	COMDAT ?wxPostEvent@@YAXPAVwxEvtHandler@@AAVwxEvent@@@Z
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_event$ = 12						; size = 4
?wxPostEvent@@YAXPAVwxEvtHandler@@AAVwxEvent@@@Z PROC	; wxPostEvent, COMDAT
; File c:\software\wxwidgets-2.8.12\include\wx\event.h
; Line 2567
	push	ebp
	mov	ebp, esp
; Line 2568
	cmp	DWORD PTR _dest$[ebp], 0
	je	SHORT $LN2@wxPostEven
	jmp	SHORT $LN1@wxPostEven
$LN2@wxPostEven:
	jmp	SHORT $LN3@wxPostEven
$LN1@wxPostEven:
; Line 2570
	mov	eax, DWORD PTR _event$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	call	?AddPendingEvent@wxEvtHandler@@QAEXAAVwxEvent@@@Z ; wxEvtHandler::AddPendingEvent
$LN3@wxPostEven:
; Line 2571
	pop	ebp
	ret	0
?wxPostEvent@@YAXPAVwxEvtHandler@@AAVwxEvent@@@Z ENDP	; wxPostEvent
_TEXT	ENDS
PUBLIC	??_7wxConvAuto@@6B@				; wxConvAuto::`vftable'
PUBLIC	??0wxMBConv@@QAE@XZ				; wxMBConv::wxMBConv
PUBLIC	??_R4wxConvAuto@@6B@				; wxConvAuto::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVwxConvAuto@@@8				; wxConvAuto `RTTI Type Descriptor'
PUBLIC	??_R3wxConvAuto@@8				; wxConvAuto::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2wxConvAuto@@8				; wxConvAuto::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@wxConvAuto@@8			; wxConvAuto::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@wxMBConv@@8			; wxMBConv::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVwxMBConv@@@8				; wxMBConv `RTTI Type Descriptor'
PUBLIC	??_R3wxMBConv@@8				; wxMBConv::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2wxMBConv@@8				; wxMBConv::`RTTI Base Class Array'
PUBLIC	?GetMBNulLen@wxConvAuto@@UBEIXZ			; wxConvAuto::GetMBNulLen
PUBLIC	?Clone@wxConvAuto@@UBEPAVwxMBConv@@XZ		; wxConvAuto::Clone
EXTRN	?ToWChar@wxConvAuto@@UBEIPA_WIPBDI@Z:PROC	; wxConvAuto::ToWChar
EXTRN	?FromWChar@wxConvAuto@@UBEIPADIPB_WI@Z:PROC	; wxConvAuto::FromWChar
EXTRN	?MB2WC@wxMBConv@@UBEIPA_WPBDI@Z:PROC		; wxMBConv::MB2WC
EXTRN	?WC2MB@wxMBConv@@UBEIPADPB_WI@Z:PROC		; wxMBConv::WC2MB
EXTRN	??_EwxConvAuto@@UAEPAXI@Z:PROC			; wxConvAuto::`vector deleting destructor'
;	COMDAT ??_R2wxMBConv@@8
; File c:\software\wxwidgets-2.8.12\include\wx\convauto.h
rdata$r	SEGMENT
??_R2wxMBConv@@8 DD FLAT:??_R1A@?0A@EA@wxMBConv@@8	; wxMBConv::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3wxMBConv@@8
rdata$r	SEGMENT
??_R3wxMBConv@@8 DD 00H					; wxMBConv::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2wxMBConv@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVwxMBConv@@@8
_DATA	SEGMENT
??_R0?AVwxMBConv@@@8 DD FLAT:??_7type_info@@6B@		; wxMBConv `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVwxMBConv@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@wxMBConv@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@wxMBConv@@8 DD FLAT:??_R0?AVwxMBConv@@@8	; wxMBConv::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3wxMBConv@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@wxConvAuto@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@wxConvAuto@@8 DD FLAT:??_R0?AVwxConvAuto@@@8 ; wxConvAuto::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3wxConvAuto@@8
rdata$r	ENDS
;	COMDAT ??_R2wxConvAuto@@8
rdata$r	SEGMENT
??_R2wxConvAuto@@8 DD FLAT:??_R1A@?0A@EA@wxConvAuto@@8	; wxConvAuto::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@wxMBConv@@8
rdata$r	ENDS
;	COMDAT ??_R3wxConvAuto@@8
rdata$r	SEGMENT
??_R3wxConvAuto@@8 DD 00H				; wxConvAuto::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2wxConvAuto@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVwxConvAuto@@@8
_DATA	SEGMENT
??_R0?AVwxConvAuto@@@8 DD FLAT:??_7type_info@@6B@	; wxConvAuto `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVwxConvAuto@@', 00H
_DATA	ENDS
;	COMDAT ??_R4wxConvAuto@@6B@
rdata$r	SEGMENT
??_R4wxConvAuto@@6B@ DD 00H				; wxConvAuto::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVwxConvAuto@@@8
	DD	FLAT:??_R3wxConvAuto@@8
rdata$r	ENDS
;	COMDAT ??_7wxConvAuto@@6B@
CONST	SEGMENT
??_7wxConvAuto@@6B@ DD FLAT:??_R4wxConvAuto@@6B@	; wxConvAuto::`vftable'
	DD	FLAT:?ToWChar@wxConvAuto@@UBEIPA_WIPBDI@Z
	DD	FLAT:?FromWChar@wxConvAuto@@UBEIPADIPB_WI@Z
	DD	FLAT:?GetMBNulLen@wxConvAuto@@UBEIXZ
	DD	FLAT:?MB2WC@wxMBConv@@UBEIPA_WPBDI@Z
	DD	FLAT:?WC2MB@wxMBConv@@UBEIPADPB_WI@Z
	DD	FLAT:?Clone@wxConvAuto@@UBEPAVwxMBConv@@XZ
	DD	FLAT:??_EwxConvAuto@@UAEPAXI@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0wxConvAuto@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0wxConvAuto@@QAE@XZ PROC				; wxConvAuto::wxConvAuto, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0wxMBConv@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7wxConvAuto@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0wxConvAuto@@QAE@XZ ENDP				; wxConvAuto::wxConvAuto
_TEXT	ENDS
PUBLIC	??_7wxMBConv@@6B@				; wxMBConv::`vftable'
PUBLIC	??_R4wxMBConv@@6B@				; wxMBConv::`RTTI Complete Object Locator'
PUBLIC	?GetMBNulLen@wxMBConv@@UBEIXZ			; wxMBConv::GetMBNulLen
EXTRN	?ToWChar@wxMBConv@@UBEIPA_WIPBDI@Z:PROC		; wxMBConv::ToWChar
EXTRN	?FromWChar@wxMBConv@@UBEIPADIPB_WI@Z:PROC	; wxMBConv::FromWChar
EXTRN	__purecall:PROC
EXTRN	??_EwxMBConv@@UAEPAXI@Z:PROC			; wxMBConv::`vector deleting destructor'
;	COMDAT ??_R4wxMBConv@@6B@
rdata$r	SEGMENT
??_R4wxMBConv@@6B@ DD 00H				; wxMBConv::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVwxMBConv@@@8
	DD	FLAT:??_R3wxMBConv@@8
rdata$r	ENDS
;	COMDAT ??_7wxMBConv@@6B@
CONST	SEGMENT
??_7wxMBConv@@6B@ DD FLAT:??_R4wxMBConv@@6B@		; wxMBConv::`vftable'
	DD	FLAT:?ToWChar@wxMBConv@@UBEIPA_WIPBDI@Z
	DD	FLAT:?FromWChar@wxMBConv@@UBEIPADIPB_WI@Z
	DD	FLAT:?GetMBNulLen@wxMBConv@@UBEIXZ
	DD	FLAT:?MB2WC@wxMBConv@@UBEIPA_WPBDI@Z
	DD	FLAT:?WC2MB@wxMBConv@@UBEIPADPB_WI@Z
	DD	FLAT:__purecall
	DD	FLAT:??_EwxMBConv@@UAEPAXI@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0wxMBConv@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0wxMBConv@@QAE@XZ PROC				; wxMBConv::wxMBConv, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7wxMBConv@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0wxMBConv@@QAE@XZ ENDP				; wxMBConv::wxMBConv
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetMBNulLen@wxMBConv@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMBNulLen@wxMBConv@@UBEIXZ PROC			; wxMBConv::GetMBNulLen, COMDAT
; _this$ = ecx
; File c:\software\wxwidgets-2.8.12\include\wx\strconv.h
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMBNulLen@wxMBConv@@UBEIXZ ENDP			; wxMBConv::GetMBNulLen
_TEXT	ENDS
EXTRN	??1wxMBConv@@UAE@XZ:PROC			; wxMBConv::~wxMBConv
; Function compile flags: /Odtp
;	COMDAT ??_GwxMBConv@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GwxMBConv@@UAEPAXI@Z PROC				; wxMBConv::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1wxMBConv@@UAE@XZ			; wxMBConv::~wxMBConv
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GwxMBConv@@UAEPAXI@Z ENDP				; wxMBConv::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\software\wxwidgets-2.8.12\include\wx\convauto.h
xdata$x	SEGMENT
__unwindtable$??1wxConvAuto@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1wxConvAuto@@UAE@XZ$0
__ehfuncinfo$??1wxConvAuto@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1wxConvAuto@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1wxConvAuto@@UAE@XZ
_TEXT	SEGMENT
tv86 = -28						; size = 4
_this$ = -24						; size = 4
$T162800 = -20						; size = 4
$T162799 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1wxConvAuto@@UAE@XZ PROC				; wxConvAuto::~wxConvAuto, COMDAT
; _this$ = ecx
; Line 32
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1wxConvAuto@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7wxConvAuto@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN2@wxConvAuto
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+12]
	test	eax, eax
	je	SHORT $LN2@wxConvAuto
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T162800[ebp], edx
	mov	eax, DWORD PTR $T162800[ebp]
	mov	DWORD PTR $T162799[ebp], eax
	cmp	DWORD PTR $T162799[ebp], 0
	je	SHORT $LN4@wxConvAuto
	push	1
	mov	ecx, DWORD PTR $T162799[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T162799[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	mov	DWORD PTR tv86[ebp], eax
	jmp	SHORT $LN2@wxConvAuto
$LN4@wxConvAuto:
	mov	DWORD PTR tv86[ebp], 0
$LN2@wxConvAuto:
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1wxMBConv@@UAE@XZ			; wxMBConv::~wxMBConv
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1wxConvAuto@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1wxMBConv@@UAE@XZ			; wxMBConv::~wxMBConv
__ehhandler$??1wxConvAuto@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1wxConvAuto@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1wxConvAuto@@UAE@XZ ENDP				; wxConvAuto::~wxConvAuto
; Function compile flags: /Odtp
;	COMDAT ?GetMBNulLen@wxConvAuto@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMBNulLen@wxConvAuto@@UBEIXZ PROC			; wxConvAuto::GetMBNulLen, COMDAT
; _this$ = ecx
; Line 41
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+8]
	call	eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMBNulLen@wxConvAuto@@UBEIXZ ENDP			; wxConvAuto::GetMBNulLen
_TEXT	ENDS
PUBLIC	??0wxConvAuto@@QAE@ABV0@@Z			; wxConvAuto::wxConvAuto
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@wxConvAuto@@UBEPAVwxMBConv@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@wxConvAuto@@UBEPAVwxMBConv@@XZ$0
__ehfuncinfo$?Clone@wxConvAuto@@UBEPAVwxMBConv@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@wxConvAuto@@UBEPAVwxMBConv@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?Clone@wxConvAuto@@UBEPAVwxMBConv@@XZ
_TEXT	SEGMENT
tv75 = -28						; size = 4
_this$ = -24						; size = 4
$T162813 = -20						; size = 4
$T162812 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@wxConvAuto@@UBEPAVwxMBConv@@XZ PROC		; wxConvAuto::Clone, COMDAT
; _this$ = ecx
; Line 43
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Clone@wxConvAuto@@UBEPAVwxMBConv@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T162813[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T162813[ebp], 0
	je	SHORT $LN3@Clone
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T162813[ebp]
	call	??0wxConvAuto@@QAE@ABV0@@Z		; wxConvAuto::wxConvAuto
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN4@Clone
$LN3@Clone:
	mov	DWORD PTR tv75[ebp], 0
$LN4@Clone:
	mov	ecx, DWORD PTR tv75[ebp]
	mov	DWORD PTR $T162812[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T162812[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@wxConvAuto@@UBEPAVwxMBConv@@XZ$0:
	mov	eax, DWORD PTR $T162813[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Clone@wxConvAuto@@UBEPAVwxMBConv@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Clone@wxConvAuto@@UBEPAVwxMBConv@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Clone@wxConvAuto@@UBEPAVwxMBConv@@XZ ENDP		; wxConvAuto::Clone
; Function compile flags: /Odtp
;	COMDAT ??0wxConvAuto@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0wxConvAuto@@QAE@ABV0@@Z PROC				; wxConvAuto::wxConvAuto, COMDAT
; _this$ = ecx
; Line 30
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0wxMBConv@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7wxConvAuto@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0wxConvAuto@@QAE@ABV0@@Z ENDP				; wxConvAuto::wxConvAuto
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_GwxConvAuto@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GwxConvAuto@@UAEPAXI@Z PROC				; wxConvAuto::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1wxConvAuto@@UAE@XZ			; wxConvAuto::~wxConvAuto
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GwxConvAuto@@UAEPAXI@Z ENDP				; wxConvAuto::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??AwxArrayString@@QBEAAVwxString@@I@Z		; wxArrayString::operator[]
PUBLIC	?empty@wxArrayString@@QBE_NXZ			; wxArrayString::empty
EXTRN	?ms_eof@wxTextBuffer@@1VwxString@@A:DWORD	; wxTextBuffer::ms_eof
; Function compile flags: /Odtp
;	COMDAT ?GetFirstLine@wxTextBuffer@@QAEAAVwxString@@XZ
_TEXT	SEGMENT
tv74 = -12						; size = 4
_this$ = -8						; size = 4
$T162827 = -4						; size = 4
?GetFirstLine@wxTextBuffer@@QAEAAVwxString@@XZ PROC	; wxTextBuffer::GetFirstLine, COMDAT
; _this$ = ecx
; File c:\software\wxwidgets-2.8.12\include\wx\textbuf.h
; Line 119
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?empty@wxArrayString@@QBE_NXZ		; wxArrayString::empty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@GetFirstLi
	mov	DWORD PTR tv74[ebp], OFFSET ?ms_eof@wxTextBuffer@@1VwxString@@A ; wxTextBuffer::ms_eof
	jmp	SHORT $LN4@GetFirstLi
$LN3@GetFirstLi:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], 0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??AwxArrayString@@QBEAAVwxString@@I@Z	; wxArrayString::operator[]
	mov	DWORD PTR tv74[ebp], eax
$LN4@GetFirstLi:
	mov	edx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T162827[ebp], edx
	mov	eax, DWORD PTR $T162827[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFirstLine@wxTextBuffer@@QAEAAVwxString@@XZ ENDP	; wxTextBuffer::GetFirstLine
_TEXT	ENDS
PUBLIC	?Item@wxArrayString@@QBEAAVwxString@@I@Z	; wxArrayString::Item
; Function compile flags: /Odtp
;	COMDAT ??AwxArrayString@@QBEAAVwxString@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
??AwxArrayString@@QBEAAVwxString@@I@Z PROC		; wxArrayString::operator[], COMDAT
; _this$ = ecx
; File c:\software\wxwidgets-2.8.12\include\wx\arrstr.h
; Line 161
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _nIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Item@wxArrayString@@QBEAAVwxString@@I@Z ; wxArrayString::Item
	mov	esp, ebp
	pop	ebp
	ret	4
??AwxArrayString@@QBEAAVwxString@@I@Z ENDP		; wxArrayString::operator[]
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?Item@wxArrayString@@QBEAAVwxString@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
?Item@wxArrayString@@QBEAAVwxString@@I@Z PROC		; wxArrayString::Item, COMDAT
; _this$ = ecx
; Line 153
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 157
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _nIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 158
	mov	esp, ebp
	pop	ebp
	ret	4
?Item@wxArrayString@@QBEAAVwxString@@I@Z ENDP		; wxArrayString::Item
_TEXT	ENDS
PUBLIC	?IsEmpty@wxArrayString@@QBE_NXZ			; wxArrayString::IsEmpty
; Function compile flags: /Odtp
;	COMDAT ?empty@wxArrayString@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?empty@wxArrayString@@QBE_NXZ PROC			; wxArrayString::empty, COMDAT
; _this$ = ecx
; Line 290
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@wxArrayString@@QBE_NXZ		; wxArrayString::IsEmpty
	mov	esp, ebp
	pop	ebp
	ret	0
?empty@wxArrayString@@QBE_NXZ ENDP			; wxArrayString::empty
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?IsEmpty@wxArrayString@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@wxArrayString@@QBE_NXZ PROC			; wxArrayString::IsEmpty, COMDAT
; _this$ = ecx
; Line 146
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@wxArrayString@@QBE_NXZ ENDP			; wxArrayString::IsEmpty
_TEXT	ENDS
PUBLIC	??0wxFile@@QAE@XZ				; wxFile::wxFile
PUBLIC	??_7wxTextFile@@6B@				; wxTextFile::`vftable'
PUBLIC	??0wxTextBuffer@@IAE@XZ				; wxTextBuffer::wxTextBuffer
PUBLIC	??_R4wxTextFile@@6B@				; wxTextFile::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVwxTextFile@@@8				; wxTextFile `RTTI Type Descriptor'
PUBLIC	??_R3wxTextFile@@8				; wxTextFile::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2wxTextFile@@8				; wxTextFile::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@wxTextFile@@8			; wxTextFile::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@wxTextBuffer@@8			; wxTextBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVwxTextBuffer@@@8			; wxTextBuffer `RTTI Type Descriptor'
PUBLIC	??_R3wxTextBuffer@@8				; wxTextBuffer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2wxTextBuffer@@8				; wxTextBuffer::`RTTI Base Class Array'
EXTRN	??1wxTextBuffer@@UAE@XZ:PROC			; wxTextBuffer::~wxTextBuffer
EXTRN	??_EwxTextFile@@UAEPAXI@Z:PROC			; wxTextFile::`vector deleting destructor'
EXTRN	?OnExists@wxTextFile@@MBE_NXZ:PROC		; wxTextFile::OnExists
EXTRN	?OnOpen@wxTextFile@@MAE_NABVwxString@@W4wxTextBufferOpenMode@wxTextBuffer@@@Z:PROC ; wxTextFile::OnOpen
EXTRN	?OnClose@wxTextFile@@MAE_NXZ:PROC		; wxTextFile::OnClose
EXTRN	?OnRead@wxTextFile@@MAE_NABVwxMBConv@@@Z:PROC	; wxTextFile::OnRead
EXTRN	?OnWrite@wxTextFile@@MAE_NW4wxTextFileType@@ABVwxMBConv@@@Z:PROC ; wxTextFile::OnWrite
;	COMDAT ??_R2wxTextBuffer@@8
; File c:\software\wxwidgets-2.8.12\include\wx\textfile.h
rdata$r	SEGMENT
??_R2wxTextBuffer@@8 DD FLAT:??_R1A@?0A@EA@wxTextBuffer@@8 ; wxTextBuffer::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3wxTextBuffer@@8
rdata$r	SEGMENT
??_R3wxTextBuffer@@8 DD 00H				; wxTextBuffer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2wxTextBuffer@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVwxTextBuffer@@@8
_DATA	SEGMENT
??_R0?AVwxTextBuffer@@@8 DD FLAT:??_7type_info@@6B@	; wxTextBuffer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVwxTextBuffer@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@wxTextBuffer@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@wxTextBuffer@@8 DD FLAT:??_R0?AVwxTextBuffer@@@8 ; wxTextBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3wxTextBuffer@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@wxTextFile@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@wxTextFile@@8 DD FLAT:??_R0?AVwxTextFile@@@8 ; wxTextFile::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3wxTextFile@@8
rdata$r	ENDS
;	COMDAT ??_R2wxTextFile@@8
rdata$r	SEGMENT
??_R2wxTextFile@@8 DD FLAT:??_R1A@?0A@EA@wxTextFile@@8	; wxTextFile::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@wxTextBuffer@@8
rdata$r	ENDS
;	COMDAT ??_R3wxTextFile@@8
rdata$r	SEGMENT
??_R3wxTextFile@@8 DD 00H				; wxTextFile::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2wxTextFile@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVwxTextFile@@@8
_DATA	SEGMENT
??_R0?AVwxTextFile@@@8 DD FLAT:??_7type_info@@6B@	; wxTextFile `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVwxTextFile@@', 00H
_DATA	ENDS
;	COMDAT ??_R4wxTextFile@@6B@
rdata$r	SEGMENT
??_R4wxTextFile@@6B@ DD 00H				; wxTextFile::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVwxTextFile@@@8
	DD	FLAT:??_R3wxTextFile@@8
rdata$r	ENDS
;	COMDAT ??_7wxTextFile@@6B@
CONST	SEGMENT
??_7wxTextFile@@6B@ DD FLAT:??_R4wxTextFile@@6B@	; wxTextFile::`vftable'
	DD	FLAT:??_EwxTextFile@@UAEPAXI@Z
	DD	FLAT:?OnExists@wxTextFile@@MBE_NXZ
	DD	FLAT:?OnOpen@wxTextFile@@MAE_NABVwxString@@W4wxTextBufferOpenMode@wxTextBuffer@@@Z
	DD	FLAT:?OnClose@wxTextFile@@MAE_NXZ
	DD	FLAT:?OnRead@wxTextFile@@MAE_NABVwxMBConv@@@Z
	DD	FLAT:?OnWrite@wxTextFile@@MAE_NW4wxTextFileType@@ABVwxMBConv@@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0wxTextFile@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0wxTextFile@@QAE@XZ$0
__ehfuncinfo$??0wxTextFile@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0wxTextFile@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0wxTextFile@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0wxTextFile@@QAE@XZ PROC				; wxTextFile::wxTextFile, COMDAT
; _this$ = ecx
; Line 33
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0wxTextFile@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0wxTextBuffer@@IAE@XZ			; wxTextBuffer::wxTextBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7wxTextFile@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??0wxFile@@QAE@XZ			; wxFile::wxFile
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0wxTextFile@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1wxTextBuffer@@UAE@XZ			; wxTextBuffer::~wxTextBuffer
__ehhandler$??0wxTextFile@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0wxTextFile@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0wxTextFile@@QAE@XZ ENDP				; wxTextFile::wxTextFile
PUBLIC	??1wxArrayLinesType@@QAE@XZ			; wxArrayLinesType::~wxArrayLinesType
PUBLIC	??0wxArrayString@@QAE@XZ			; wxArrayString::wxArrayString
PUBLIC	??0wxArrayLinesType@@QAE@XZ			; wxArrayLinesType::wxArrayLinesType
PUBLIC	??0wxString@@QAE@XZ				; wxString::wxString
PUBLIC	??_7wxTextBuffer@@6B@				; wxTextBuffer::`vftable'
PUBLIC	??_R4wxTextBuffer@@6B@				; wxTextBuffer::`RTTI Complete Object Locator'
EXTRN	??_EwxTextBuffer@@UAEPAXI@Z:PROC		; wxTextBuffer::`vector deleting destructor'
;	COMDAT ??_R4wxTextBuffer@@6B@
; File c:\software\wxwidgets-2.8.12\include\wx\textbuf.h
rdata$r	SEGMENT
??_R4wxTextBuffer@@6B@ DD 00H				; wxTextBuffer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVwxTextBuffer@@@8
	DD	FLAT:??_R3wxTextBuffer@@8
rdata$r	ENDS
;	COMDAT ??_7wxTextBuffer@@6B@
CONST	SEGMENT
??_7wxTextBuffer@@6B@ DD FLAT:??_R4wxTextBuffer@@6B@	; wxTextBuffer::`vftable'
	DD	FLAT:??_EwxTextBuffer@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0wxTextBuffer@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0wxTextBuffer@@IAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0wxTextBuffer@@IAE@XZ$1
__ehfuncinfo$??0wxTextBuffer@@IAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0wxTextBuffer@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0wxTextBuffer@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0wxTextBuffer@@IAE@XZ PROC				; wxTextBuffer::wxTextBuffer, COMDAT
; _this$ = ecx
; Line 175
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0wxTextBuffer@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7wxTextBuffer@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0wxString@@QAE@XZ			; wxString::wxString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0wxArrayLinesType@@QAE@XZ		; wxArrayLinesType::wxArrayLinesType
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0wxArrayString@@QAE@XZ		; wxArrayString::wxArrayString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+40], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0wxTextBuffer@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1wxString@@QAE@XZ
__unwindfunclet$??0wxTextBuffer@@IAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1wxArrayLinesType@@QAE@XZ		; wxArrayLinesType::~wxArrayLinesType
__ehhandler$??0wxTextBuffer@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0wxTextBuffer@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0wxTextBuffer@@IAE@XZ ENDP				; wxTextBuffer::wxTextBuffer
PUBLIC	??0wxStringBase@@QAE@XZ				; wxStringBase::wxStringBase
; Function compile flags: /Odtp
;	COMDAT ??0wxString@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0wxString@@QAE@XZ PROC				; wxString::wxString, COMDAT
; _this$ = ecx
; File c:\software\wxwidgets-2.8.12\include\wx\string.h
; Line 687
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0wxStringBase@@QAE@XZ			; wxStringBase::wxStringBase
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0wxString@@QAE@XZ ENDP				; wxString::wxString
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0wxStringBase@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0wxStringBase@@QAE@XZ PROC				; wxStringBase::wxStringBase, COMDAT
; _this$ = ecx
; Line 347
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@wxStringBase@@IAEXXZ		; wxStringBase::Init
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0wxStringBase@@QAE@XZ ENDP				; wxStringBase::wxStringBase
_TEXT	ENDS
EXTRN	?Init@wxArrayString@@IAEX_N@Z:PROC		; wxArrayString::Init
; Function compile flags: /Odtp
;	COMDAT ??0wxArrayString@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0wxArrayString@@QAE@XZ PROC				; wxArrayString::wxArrayString, COMDAT
; _this$ = ecx
; File c:\software\wxwidgets-2.8.12\include\wx\arrstr.h
; Line 111
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@wxArrayString@@IAEX_N@Z		; wxArrayString::Init
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0wxArrayString@@QAE@XZ ENDP				; wxArrayString::wxArrayString
_TEXT	ENDS
EXTRN	??0wxBaseArrayInt@@QAE@XZ:PROC			; wxBaseArrayInt::wxBaseArrayInt
; Function compile flags: /Odtp
;	COMDAT ??0wxArrayLinesType@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0wxArrayLinesType@@QAE@XZ PROC			; wxArrayLinesType::wxArrayLinesType, COMDAT
; _this$ = ecx
; File c:\software\wxwidgets-2.8.12\include\wx\textbuf.h
; Line 45
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0wxBaseArrayInt@@QAE@XZ		; wxBaseArrayInt::wxBaseArrayInt
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0wxArrayLinesType@@QAE@XZ ENDP			; wxArrayLinesType::wxArrayLinesType
_TEXT	ENDS
EXTRN	??1wxBaseArrayInt@@QAE@XZ:PROC			; wxBaseArrayInt::~wxBaseArrayInt
; Function compile flags: /Odtp
;	COMDAT ??1wxArrayLinesType@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1wxArrayLinesType@@QAE@XZ PROC			; wxArrayLinesType::~wxArrayLinesType, COMDAT
; _this$ = ecx
; Line 45
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1wxBaseArrayInt@@QAE@XZ		; wxBaseArrayInt::~wxBaseArrayInt
	mov	esp, ebp
	pop	ebp
	ret	0
??1wxArrayLinesType@@QAE@XZ ENDP			; wxArrayLinesType::~wxArrayLinesType
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_GwxTextBuffer@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GwxTextBuffer@@UAEPAXI@Z PROC			; wxTextBuffer::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1wxTextBuffer@@UAE@XZ			; wxTextBuffer::~wxTextBuffer
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GwxTextBuffer@@UAEPAXI@Z ENDP			; wxTextBuffer::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0wxFile@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0wxFile@@QAE@XZ PROC					; wxFile::wxFile, COMDAT
; _this$ = ecx
; File c:\software\wxwidgets-2.8.12\include\wx\file.h
; Line 74
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0wxFile@@QAE@XZ ENDP					; wxFile::wxFile
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_GwxTextFile@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GwxTextFile@@UAEPAXI@Z PROC				; wxTextFile::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1wxTextFile@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GwxTextFile@@UAEPAXI@Z ENDP				; wxTextFile::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1wxFile@@QAE@XZ				; wxFile::~wxFile
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1wxTextFile@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1wxTextFile@@UAE@XZ$0
__ehfuncinfo$??1wxTextFile@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1wxTextFile@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1wxTextFile@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1wxTextFile@@UAE@XZ PROC				; wxTextFile::~wxTextFile, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1wxTextFile@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??1wxFile@@QAE@XZ			; wxFile::~wxFile
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1wxTextBuffer@@UAE@XZ			; wxTextBuffer::~wxTextBuffer
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1wxTextFile@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1wxTextBuffer@@UAE@XZ			; wxTextBuffer::~wxTextBuffer
__ehhandler$??1wxTextFile@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1wxTextFile@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1wxTextFile@@UAE@XZ ENDP				; wxTextFile::~wxTextFile
EXTRN	?Close@wxFile@@QAE_NXZ:PROC			; wxFile::Close
; Function compile flags: /Odtp
;	COMDAT ??1wxFile@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1wxFile@@QAE@XZ PROC					; wxFile::~wxFile, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Close@wxFile@@QAE_NXZ			; wxFile::Close
	mov	esp, ebp
	pop	ebp
	ret	0
??1wxFile@@QAE@XZ ENDP					; wxFile::~wxFile
_TEXT	ENDS
EXTRN	??1wxArrayString@@QAE@XZ:PROC			; wxArrayString::~wxArrayString
EXTRN	?Assign@wxFileName@@QAEXABVwxString@@W4wxPathFormat@@@Z:PROC ; wxFileName::Assign
;	COMDAT xdata$x
; File c:\software\wxwidgets-2.8.12\include\wx\filename.h
xdata$x	SEGMENT
__unwindtable$??0wxFileName@@QAE@ABVwxString@@W4wxPathFormat@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0wxFileName@@QAE@ABVwxString@@W4wxPathFormat@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0wxFileName@@QAE@ABVwxString@@W4wxPathFormat@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0wxFileName@@QAE@ABVwxString@@W4wxPathFormat@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0wxFileName@@QAE@ABVwxString@@W4wxPathFormat@@@Z$3
__ehfuncinfo$??0wxFileName@@QAE@ABVwxString@@W4wxPathFormat@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0wxFileName@@QAE@ABVwxString@@W4wxPathFormat@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0wxFileName@@QAE@ABVwxString@@W4wxPathFormat@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_fullpath$ = 8						; size = 4
_format$ = 12						; size = 4
??0wxFileName@@QAE@ABVwxString@@W4wxPathFormat@@@Z PROC	; wxFileName::wxFileName, COMDAT
; _this$ = ecx
; Line 108
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0wxFileName@@QAE@ABVwxString@@W4wxPathFormat@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0wxString@@QAE@XZ			; wxString::wxString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0wxArrayString@@QAE@XZ		; wxArrayString::wxArrayString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0wxString@@QAE@XZ			; wxString::wxString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0wxString@@QAE@XZ			; wxString::wxString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR _format$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fullpath$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Assign@wxFileName@@QAEXABVwxString@@W4wxPathFormat@@@Z ; wxFileName::Assign
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0wxFileName@@QAE@ABVwxString@@W4wxPathFormat@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1wxString@@QAE@XZ
__unwindfunclet$??0wxFileName@@QAE@ABVwxString@@W4wxPathFormat@@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1wxArrayString@@QAE@XZ		; wxArrayString::~wxArrayString
__unwindfunclet$??0wxFileName@@QAE@ABVwxString@@W4wxPathFormat@@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1wxString@@QAE@XZ
__unwindfunclet$??0wxFileName@@QAE@ABVwxString@@W4wxPathFormat@@@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1wxString@@QAE@XZ
__ehhandler$??0wxFileName@@QAE@ABVwxString@@W4wxPathFormat@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0wxFileName@@QAE@ABVwxString@@W4wxPathFormat@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0wxFileName@@QAE@ABVwxString@@W4wxPathFormat@@@Z ENDP	; wxFileName::wxFileName
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1wxFileName@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1wxFileName@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1wxFileName@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1wxFileName@@QAE@XZ$2
__ehfuncinfo$??1wxFileName@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1wxFileName@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1wxFileName@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1wxFileName@@QAE@XZ PROC				; wxFileName::~wxFileName, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1wxFileName@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1wxString@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1wxString@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1wxArrayString@@QAE@XZ		; wxArrayString::~wxArrayString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1wxString@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1wxFileName@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1wxString@@QAE@XZ
__unwindfunclet$??1wxFileName@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1wxArrayString@@QAE@XZ		; wxArrayString::~wxArrayString
__unwindfunclet$??1wxFileName@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1wxString@@QAE@XZ
__ehhandler$??1wxFileName@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1wxFileName@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1wxFileName@@QAE@XZ ENDP				; wxFileName::~wxFileName
EXTRN	_sscanf:PROC
EXTRN	__strlwr:PROC
EXTRN	__strdup:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_this$ = -28						; size = 4
_string$ = -24						; size = 4
_mj$ = -20						; size = 4
_rev$ = -16						; size = 4
_uv$ = -12						; size = 4
_mn$ = -8						; size = 4
_res$ = -4						; size = 4
_version$ = 8						; size = 4
?ParseVersionString@UpgradeThread@@AAEHPBD@Z PROC	; UpgradeThread::ParseVersionString
; _this$ = ecx
; File c:\software\ultradefrag-7.0.0-beta2.src\src\wxgui\upgrade.cpp
; Line 112
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 113
	mov	eax, DWORD PTR _version$[ebp]
	push	eax
	call	__strdup
	add	esp, 4
	mov	DWORD PTR _string$[ebp], eax
; Line 114
	cmp	DWORD PTR _string$[ebp], 0
	jne	SHORT $LN9@ParseVersi
	xor	eax, eax
	jmp	$LN10@ParseVersi
$LN9@ParseVersi:
; Line 116
	mov	ecx, DWORD PTR _string$[ebp]
	push	ecx
	call	__strlwr
	add	esp, 4
; Line 121
	lea	edx, DWORD PTR _uv$[ebp]
	push	edx
	lea	eax, DWORD PTR _rev$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mn$[ebp]
	push	ecx
	lea	edx, DWORD PTR _mj$[ebp]
	push	edx
	push	OFFSET $SG153372
	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	call	_sscanf
	add	esp, 24					; 00000018H
	mov	DWORD PTR _res$[ebp], eax
; Line 122
	cmp	DWORD PTR _res$[ebp], 4
	jne	SHORT $LN8@ParseVersi
; Line 123
	mov	ecx, DWORD PTR _uv$[ebp]
	add	ecx, 100				; 00000064H
	mov	DWORD PTR _uv$[ebp], ecx
; Line 124
	jmp	$LN7@ParseVersi
$LN8@ParseVersi:
; Line 125
	lea	edx, DWORD PTR _uv$[ebp]
	push	edx
	lea	eax, DWORD PTR _rev$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mn$[ebp]
	push	ecx
	lea	edx, DWORD PTR _mj$[ebp]
	push	edx
	push	OFFSET $SG153375
	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	call	_sscanf
	add	esp, 24					; 00000018H
	mov	DWORD PTR _res$[ebp], eax
; Line 126
	cmp	DWORD PTR _res$[ebp], 4
	jne	SHORT $LN6@ParseVersi
; Line 127
	mov	ecx, DWORD PTR _uv$[ebp]
	add	ecx, 200				; 000000c8H
	mov	DWORD PTR _uv$[ebp], ecx
; Line 128
	jmp	$LN7@ParseVersi
$LN6@ParseVersi:
; Line 129
	lea	edx, DWORD PTR _uv$[ebp]
	push	edx
	lea	eax, DWORD PTR _rev$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mn$[ebp]
	push	ecx
	lea	edx, DWORD PTR _mj$[ebp]
	push	edx
	push	OFFSET $SG153378
	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	call	_sscanf
	add	esp, 24					; 00000018H
	mov	DWORD PTR _res$[ebp], eax
; Line 130
	cmp	DWORD PTR _res$[ebp], 4
	jne	SHORT $LN4@ParseVersi
; Line 131
	mov	ecx, DWORD PTR _uv$[ebp]
	add	ecx, 300				; 0000012cH
	mov	DWORD PTR _uv$[ebp], ecx
; Line 132
	jmp	SHORT $LN7@ParseVersi
$LN4@ParseVersi:
; Line 133
	lea	edx, DWORD PTR _rev$[ebp]
	push	edx
	lea	eax, DWORD PTR _mn$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mj$[ebp]
	push	ecx
	push	OFFSET $SG153381
	mov	edx, DWORD PTR _string$[ebp]
	push	edx
	call	_sscanf
	add	esp, 20					; 00000014H
	mov	DWORD PTR _res$[ebp], eax
; Line 134
	cmp	DWORD PTR _res$[ebp], 3
	jne	SHORT $LN2@ParseVersi
; Line 135
	mov	DWORD PTR _uv$[ebp], 999		; 000003e7H
; Line 136
	jmp	SHORT $LN7@ParseVersi
$LN2@ParseVersi:
; Line 137
	mov	eax, DWORD PTR _version$[ebp]
	push	eax
	push	OFFSET $SG153384
	push	OFFSET $SG153385
	push	0
	call	_winx_dbg_print
	add	esp, 16					; 00000010H
; Line 138
	xor	eax, eax
	jmp	SHORT $LN10@ParseVersi
$LN7@ParseVersi:
; Line 144
	mov	ecx, DWORD PTR _string$[ebp]
	push	ecx
	call	_free
	add	esp, 4
; Line 147
	mov	edx, DWORD PTR _mj$[ebp]
	imul	edx, 10000000				; 00989680H
	mov	eax, DWORD PTR _mn$[ebp]
	imul	eax, 100000				; 000186a0H
	add	edx, eax
	mov	eax, DWORD PTR _rev$[ebp]
	imul	eax, 1000				; 000003e8H
	add	edx, DWORD PTR _uv$[ebp]
	add	eax, edx
$LN10@ParseVersi:
; Line 148
	mov	esp, ebp
	pop	ebp
	ret	4
?ParseVersionString@UpgradeThread@@AAEHPBD@Z ENDP	; UpgradeThread::ParseVersionString
_TEXT	ENDS
PUBLIC	?GetId@wxEvent@@QBEHXZ				; wxEvent::GetId
PUBLIC	?OnHelpUpgrade@MainFrame@@QAEXAAVwxCommandEvent@@@Z ; MainFrame::OnHelpUpgrade
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
_event$ = 8						; size = 4
?OnHelpUpgrade@MainFrame@@QAEXAAVwxCommandEvent@@@Z PROC ; MainFrame::OnHelpUpgrade
; _this$ = ecx
; Line 155
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 156
	mov	ecx, DWORD PTR _event$[ebp]
	call	?GetId@wxEvent@@QBEHXZ			; wxEvent::GetId
	mov	DWORD PTR tv70[ebp], eax
	mov	eax, DWORD PTR tv70[ebp]
	sub	eax, 43					; 0000002bH
	mov	DWORD PTR tv70[ebp], eax
	cmp	DWORD PTR tv70[ebp], 3
	ja	SHORT $LN6@OnHelpUpgr
	mov	ecx, DWORD PTR tv70[ebp]
	jmp	DWORD PTR $LN8@OnHelpUpgr[ecx*4]
$LN3@OnHelpUpgr:
; Line 159
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1348]
	mov	DWORD PTR [eax+40], 0
; Line 160
	jmp	SHORT $LN6@OnHelpUpgr
$LN2@OnHelpUpgr:
; Line 164
	mov	ecx, DWORD PTR _event$[ebp]
	call	?GetId@wxEvent@@QBEHXZ			; wxEvent::GetId
	sub	eax, 43					; 0000002bH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1348]
	mov	DWORD PTR [edx+40], eax
$LN1@OnHelpUpgr:
; Line 167
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1348]
	mov	BYTE PTR [ecx+36], 1
$LN6@OnHelpUpgr:
; Line 169
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN8@OnHelpUpgr:
	DD	$LN3@OnHelpUpgr
	DD	$LN2@OnHelpUpgr
	DD	$LN2@OnHelpUpgr
	DD	$LN1@OnHelpUpgr
?OnHelpUpgrade@MainFrame@@QAEXAAVwxCommandEvent@@@Z ENDP ; MainFrame::OnHelpUpgrade
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetId@wxEvent@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetId@wxEvent@@QBEHXZ PROC				; wxEvent::GetId, COMDAT
; _this$ = ecx
; File c:\software\wxwidgets-2.8.12\include\wx\event.h
; Line 346
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetId@wxEvent@@QBEHXZ ENDP				; wxEvent::GetId
_TEXT	ENDS
PUBLIC	?wxGetTranslation@@YAPB_WPB_W0@Z		; wxGetTranslation
PUBLIC	?ShowUpgradeDialog@MainFrame@@QAEXAAVwxCommandEvent@@@Z ; MainFrame::ShowUpgradeDialog
EXTRN	?ShowError@Utils@@SAXPB_WZZ:PROC		; Utils::ShowError
EXTRN	?wxLaunchDefaultBrowser@@YA_NABVwxString@@H@Z:PROC ; wxLaunchDefaultBrowser
EXTRN	?MessageDialog@Utils@@SAHPAVwxFrame@@ABVwxString@@111PB_WZZ:PROC ; Utils::MessageDialog
EXTRN	?Printf@wxString@@QAAHPB_WZZ:PROC		; wxString::Printf
EXTRN	?GetString@wxCommandEvent@@QBE?AVwxString@@XZ:PROC ; wxCommandEvent::GetString
xdata$x	SEGMENT
__ehfuncinfo$?ShowUpgradeDialog@MainFrame@@QAEXAAVwxCommandEvent@@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?ShowUpgradeDialog@MainFrame@@QAEXAAVwxCommandEvent@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ShowUpgradeDialog@MainFrame@@QAEXAAVwxCommandEvent@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ShowUpgradeDialog@MainFrame@@QAEXAAVwxCommandEvent@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ShowUpgradeDialog@MainFrame@@QAEXAAVwxCommandEvent@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?ShowUpgradeDialog@MainFrame@@QAEXAAVwxCommandEvent@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?ShowUpgradeDialog@MainFrame@@QAEXAAVwxCommandEvent@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?ShowUpgradeDialog@MainFrame@@QAEXAAVwxCommandEvent@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?ShowUpgradeDialog@MainFrame@@QAEXAAVwxCommandEvent@@@Z$5
	DD	00H
	DD	FLAT:__unwindfunclet$?ShowUpgradeDialog@MainFrame@@QAEXAAVwxCommandEvent@@@Z$6
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
tv170 = -56						; size = 4
tv65 = -52						; size = 4
_this$ = -48						; size = 4
$T162906 = -44						; size = 4
$T162905 = -40						; size = 4
$T162904 = -36						; size = 4
$T162903 = -32						; size = 4
$T162902 = -25						; size = 1
$T162901 = -24						; size = 4
_url$153415 = -20					; size = 4
_message$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_event$ = 8						; size = 4
?ShowUpgradeDialog@MainFrame@@QAEXAAVwxCommandEvent@@@Z PROC ; MainFrame::ShowUpgradeDialog
; _this$ = ecx
; File c:\software\ultradefrag-7.0.0-beta2.src\src\wxgui\upgrade.cpp
; Line 172
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ShowUpgradeDialog@MainFrame@@QAEXAAVwxCommandEvent@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 173
	lea	ecx, DWORD PTR _message$[ebp]
	call	??0wxString@@QAE@XZ			; wxString::wxString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 176
	lea	eax, DWORD PTR $T162901[ebp]
	push	eax
	mov	ecx, DWORD PTR _event$[ebp]
	call	?GetString@wxCommandEvent@@QBE?AVwxString@@XZ ; wxCommandEvent::GetString
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv170[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv170[ebp]
	call	?wc_str@wxString@@QBEPB_WXZ		; wxString::wc_str
	push	eax
	push	0
	push	OFFSET $SG153404
	call	?wxGetTranslation@@YAPB_WPB_W0@Z	; wxGetTranslation
	add	esp, 8
	push	eax
	lea	edx, DWORD PTR _message$[ebp]
	push	edx
	call	?Printf@wxString@@QAAHPB_WZZ		; wxString::Printf
	add	esp, 12					; 0000000cH
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T162901[ebp]
	call	??1wxString@@QAE@XZ
; Line 179
	push	0
	push	OFFSET $SG153411
	call	?wxGetTranslation@@YAPB_WPB_W0@Z	; wxGetTranslation
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR $T162903[ebp]
	call	??0wxString@@QAE@PB_W@Z			; wxString::wxString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	push	0
	push	OFFSET $SG153412
	call	?wxGetTranslation@@YAPB_WPB_W0@Z	; wxGetTranslation
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR $T162904[ebp]
	call	??0wxString@@QAE@PB_W@Z			; wxString::wxString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	push	OFFSET $SG153413
	lea	ecx, DWORD PTR $T162905[ebp]
	call	??0wxString@@QAE@PB_W@Z			; wxString::wxString
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	push	0
	push	OFFSET $SG153414
	call	?wxGetTranslation@@YAPB_WPB_W0@Z	; wxGetTranslation
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR $T162906[ebp]
	call	??0wxString@@QAE@PB_W@Z			; wxString::wxString
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _message$[ebp]
	call	??BwxString@@QBEPB_WXZ			; wxString::operator wchar_t const *
	push	eax
	lea	eax, DWORD PTR $T162903[ebp]
	push	eax
	lea	ecx, DWORD PTR $T162904[ebp]
	push	ecx
	lea	edx, DWORD PTR $T162905[ebp]
	push	edx
	lea	eax, DWORD PTR $T162906[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?MessageDialog@Utils@@SAHPAVwxFrame@@ABVwxString@@111PB_WZZ ; Utils::MessageDialog
	add	esp, 24					; 00000018H
	xor	edx, edx
	cmp	eax, 5100				; 000013ecH
	sete	dl
	mov	BYTE PTR $T162902[ebp], dl
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T162906[ebp]
	call	??1wxString@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T162905[ebp]
	call	??1wxString@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T162904[ebp]
	call	??1wxString@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T162903[ebp]
	call	??1wxString@@QAE@XZ
	movzx	eax, BYTE PTR $T162902[ebp]
	test	eax, eax
	je	SHORT $LN2@ShowUpgrad
; Line 181
	push	OFFSET $SG153416
	lea	ecx, DWORD PTR _url$153415[ebp]
	call	??0wxString@@QAE@PB_W@Z			; wxString::wxString
	mov	BYTE PTR __$EHRec$[ebp+8], 6
; Line 182
	push	0
	lea	ecx, DWORD PTR _url$153415[ebp]
	push	ecx
	call	?wxLaunchDefaultBrowser@@YA_NABVwxString@@H@Z ; wxLaunchDefaultBrowser
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@ShowUpgrad
; Line 183
	lea	ecx, DWORD PTR _url$153415[ebp]
	call	?wc_str@wxString@@QBEPB_WXZ		; wxString::wc_str
	push	eax
	push	OFFSET $SG153418
	call	?ShowError@Utils@@SAXPB_WZZ		; Utils::ShowError
	add	esp, 8
$LN1@ShowUpgrad:
; Line 184
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _url$153415[ebp]
	call	??1wxString@@QAE@XZ
$LN2@ShowUpgrad:
; Line 185
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _message$[ebp]
	call	??1wxString@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ShowUpgradeDialog@MainFrame@@QAEXAAVwxCommandEvent@@@Z$0:
	lea	ecx, DWORD PTR _message$[ebp]
	jmp	??1wxString@@QAE@XZ
__unwindfunclet$?ShowUpgradeDialog@MainFrame@@QAEXAAVwxCommandEvent@@@Z$1:
	lea	ecx, DWORD PTR $T162901[ebp]
	jmp	??1wxString@@QAE@XZ
__unwindfunclet$?ShowUpgradeDialog@MainFrame@@QAEXAAVwxCommandEvent@@@Z$2:
	lea	ecx, DWORD PTR $T162903[ebp]
	jmp	??1wxString@@QAE@XZ
__unwindfunclet$?ShowUpgradeDialog@MainFrame@@QAEXAAVwxCommandEvent@@@Z$3:
	lea	ecx, DWORD PTR $T162904[ebp]
	jmp	??1wxString@@QAE@XZ
__unwindfunclet$?ShowUpgradeDialog@MainFrame@@QAEXAAVwxCommandEvent@@@Z$4:
	lea	ecx, DWORD PTR $T162905[ebp]
	jmp	??1wxString@@QAE@XZ
__unwindfunclet$?ShowUpgradeDialog@MainFrame@@QAEXAAVwxCommandEvent@@@Z$5:
	lea	ecx, DWORD PTR $T162906[ebp]
	jmp	??1wxString@@QAE@XZ
__unwindfunclet$?ShowUpgradeDialog@MainFrame@@QAEXAAVwxCommandEvent@@@Z$6:
	lea	ecx, DWORD PTR _url$153415[ebp]
	jmp	??1wxString@@QAE@XZ
__ehhandler$?ShowUpgradeDialog@MainFrame@@QAEXAAVwxCommandEvent@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ShowUpgradeDialog@MainFrame@@QAEXAAVwxCommandEvent@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ShowUpgradeDialog@MainFrame@@QAEXAAVwxCommandEvent@@@Z ENDP ; MainFrame::ShowUpgradeDialog
EXTRN	?wxGetLocale@@YAPAVwxLocale@@XZ:PROC		; wxGetLocale
; Function compile flags: /Odtp
;	COMDAT ?wxGetTranslation@@YAPB_WPB_W0@Z
_TEXT	SEGMENT
_pLoc$ = -4						; size = 4
_sz$ = 8						; size = 4
_domain$ = 12						; size = 4
?wxGetTranslation@@YAPB_WPB_W0@Z PROC			; wxGetTranslation, COMDAT
; File c:\software\wxwidgets-2.8.12\include\wx\intl.h
; Line 580
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 581
	call	?wxGetLocale@@YAPAVwxLocale@@XZ		; wxGetLocale
	mov	DWORD PTR _pLoc$[ebp], eax
; Line 582
	cmp	DWORD PTR _pLoc$[ebp], 0
	je	SHORT $LN2@wxGetTrans
; Line 583
	mov	eax, DWORD PTR _domain$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sz$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pLoc$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pLoc$[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	jmp	SHORT $LN3@wxGetTrans
; Line 584
	jmp	SHORT $LN3@wxGetTrans
$LN2@wxGetTrans:
; Line 585
	mov	eax, DWORD PTR _sz$[ebp]
$LN3@wxGetTrans:
; Line 586
	mov	esp, ebp
	pop	ebp
	ret	0
?wxGetTranslation@@YAPB_WPB_W0@Z ENDP			; wxGetTranslation
_TEXT	ENDS
END
